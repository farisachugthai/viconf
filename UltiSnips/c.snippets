# c.snippets

priority 70

snippet def "#define ..."
#define ${0:${VISUAL}}
endsnippet

snippet # "#include" b
#${1:include} <${VISUAL:${0}}>
endsnippet

# this behaves oddly
snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet if "#if #endif" b
#if ${1:${VISUAL}}
${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if ${1:${VISUAL}}
	${2:#pragma mark -}
	#pragma mark $3
#endif
endsnippet

snippet main "main() (main)" b
int main(${1:int argc}, ${2:char *argv[]})
{
	${0:${VISUAL}}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet func "function multiline - visual" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet func "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

global !p
from snippets_helper import split_line, get_args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet header "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}
* Created:          `date +%m/%d/%y`
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header - warning legitimately huge" b
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet

# Vim: set foldmethod=marker foldlevelstart=0 ft=snippets.c:
