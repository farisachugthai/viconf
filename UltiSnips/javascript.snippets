# ============================================================================
# File: javascript.snippets
# Author: Faris Chugthai
# Description: Javascript snippets
# Last Modified: August 24, 2019
# ============================================================================

# Functions: {{{1

snippet proto "prototype"
${1:class_name}.prototype.${2:method_name} = function(${3}) {
	${0:${VISUAL}}
};
endsnippet

snippet fun " Function"
function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet anf "Anonymous Function" w
function(${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet vaf " Anonymous Function assigned to variable"
var ${1:function_name} = function(${2}) {
	${0:${VISUAL}}
};
endsnippet

snippet vf "Function assigned to variable"
var ${1:function_name} = function $1(${2}) {
	${0:${VISUAL}}
};
endsnippet

snippet (f "Immediate function"
(function(${1}) {
	${0:${VISUAL}}
}(${2}));
endsnippet

snippet ;fe "Minify safe iife"
;(function(${1}) {
	${0:${VISUAL}}
}(${2}))
endsnippet

snippet sdf "self-defining function"
var ${1:function_name} = function (${2:argument}) {
	${3}

	$1 = function ($2) {
		${0:${VISUAL}}
	};
};
endsnippet

#  Flow Control: {{{1

snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

snippet ter "tertiary conditional"
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet switch "switch case break default"
switch (${1:expression}) {
	case "${3:case}":
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case xyz: ... break"
case '${1:case}':
	${0:${VISUAL}}
	break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
	} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
	} catch (${1:e}) {
	${2:/* handle error */}
	} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

snippet terr "throw Error"
throw new Error('${1:error message}')
endsnippet

snippet ret "return"
return ${0:result};
endsnippet

snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet

snippet fori "For in loop"
	for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
	}
endsnippet

#  Objects: {{{1

snippet :f "Object method"
${1:method_name}: function (${2:attribute}) {
	${0:${VISUAL}}
},
endsnippet

snippet has "hasOwnProperty(arg)"
hasOwnProperty(${0:$VISUAL})
endsnippet

snippet sing "singleton function"
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;

	// rewrite the constructor
	$1 = function $1($2) {
	return instance;
	};

	// carry over the prototype properties
	$1.prototype = this;

	// the instance
	instance = new $1();

	// reset the constructor pointer
	instance.constructor = $1;

	${0}

	return instance;
}
endsnippet

snippet obj "Crockford's object function"
function object(o) {
	function F() {}
	F.prototype = o;
	return new F();
}
endsnippet

snippet props "Define multiple properties"
var ${1:my_object} = Object.defineProperties(
	${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
			set : function $1_$3_setter(value) {
	// setter code
			},
			value        : ${4:value},
			writeable    : ${5:boolean},
			enumerable   : ${6:boolean},
		configurable : ${0:boolean}
		}
	}
);
endsnippet

snippet prop "Define single property"
Object.defineProperty(
	${1:object},
	'${2:property}',
	{
			get : function $1_$2_getter() {
					// getter code
			},
			set : function $1_$2_setter(value) {
					// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
	}
);
# Documentation
endsnippet

snippet /** "docstring"
/**
* ${0:description}
*
*/
endsnippet

snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret
@return {${1:type}} ${0:description}
endsnippet


# JSON: {{{1
snippet jsonp "JSON.parse"
JSON.parse(${0:jstr});
endsnippet

snippet jsons "JSON.stringify"
JSON.stringify(${0:object});
endsnippet

# DOM Elements: {{{1

snippet get "Get elements"
getElementsBy${1:TagName}('${0}')
endsnippet

snippet gett "Get element"
getElementBy${1:Id}('${0}')
endsnippet

snippet by. "Elements by class"
${1:document}.getElementsByClassName('${0:class}')
endsnippet

snippet by# "Element by ID"
${1:document}.getElementById('${0:element ID}')
endsnippet

snippet qs  "Query selector"
${1:document}.querySelector('${0:CSS selector}')
endsnippet

snippet qsa "Query selector all"
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

snippet de "Debugging"
debugger;
endsnippet

snippet cl "console.log"
console.log(${0});
endsnippet

snippet cd "console.debug"
console.debug(${0});
endsnippet

snippet ce "console.error"
console.error(${0});
endsnippet

snippet cw "console.warn"
console.warn(${0});
endsnippet

snippet ci "console.info"
console.info(${0});
endsnippet

snippet ct "console.trace"
console.trace(${0:label});
endsnippet

snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}");
${0:${VISUAL}}
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}");
endsnippet

snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj});
endsnippet

snippet cclear "console.clear"
console.clear();
endsnippet

snippet cdir "console.dir"
console.dir(${0:obj});
endsnippet

snippet cdirx "console.dirxml"
console.dirxml(${1:object});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

snippet cprof "console.profile"
console.profile("${1:label}");
${0:${VISUAL}}
console.profileEnd();
endsnippet

snippet ctable "console.table"
console.table(${1:"${2:value}"});
endsnippet

#  Misc: {{{1

snippet use "use strict"
${0:use strict};
endsnippet

snippet timeout "setTimeout function"
setTimeout(function () {${0}}${2}, ${1:10});
endsnippet

snippet " "Because I need to" w
"${0:${VISUAL}}"
endsnippet

snippet emitter "emitter properties" b
private readonly ${1} = new emitter<$2>()
public readonly ${1/^_(.*)/$1/}: event<$2> = this.$1.event
endsnippet

# Vim: set fdls=0 ts=2 sts=2 sw=2:
