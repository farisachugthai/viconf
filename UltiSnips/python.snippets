# python.snippets
priority 70

extends rst

#######################################################################
#				 Python Snippets									  #
#######################################################################

# UltiSnips Imports:{{{1
global !p

NORMAL	= 0x1
DOXYGEN = 0x2
SPHINX	= 0x3
GOOGLE	= 0x4
NUMPY	= 0x5
JEDI	= 0x6

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'

from snippets_helper import *

endglobal

# These snippets are kinda organized in the order of beginning and creating a new python module

# Beginning of the module: {{{1

# Start out with a shebang
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
$0
endsnippet

# Docstrings: {{{2

snippet doc "Module Docstring. Contains 3 other snippets for optimal expansion and minimal typing" b
"""
${1:header}

${2:mod}

${3:exa}
"""
endsnippet
snippet header "The beginning of moddoc" b
${1:${VISUAL:One sentence module summary.}}

:File: `!p snip.rv = snip.fn`
:Author: `!v g:snips_author`
endsnippet

snippet mod "A module directive typically used in a docstring." b
.. :module:\``!p snip.rv = snip.basename`\`
	:synopsis:
endsnippet

snippet att "Expand only the attributes section of the module docstring snippet." b
${1:${VISUAL:Attributes}}
`!p snip.rv = len(t[1])*'-'`
${2:mod_variables} : ${3:type}
	${4:Explanation and give an inline docstring.}
endsnippet

snippet exa "Expand only the examples section of the module docstring snippet." b
${1:${VISUAL:Examples}}
`!p snip.rv = len(t[1])*'-'`

${2:code-block}:: ${3:python}

	${4:raise}
endsnippet

snippet par "Parameters section for docstrings." b
${1:${VISUAL:Parameters}}
`!p snip.rv = len(t[1])*'-'`
${2:todo} : ${3:type}
	${4:description}
endsnippet

snippet ret "Return section for docstrings." b
${1:${VISUAL:Returns}}
`!p snip.rv = len(t[1])*'-'`
${2:todo} : ${3:type}
	${4:description}
endsnippet

snippet Yields "Return section for docstrings." b
Yields
------
${1:todo} : ${2:type}
	${3:description}
endsnippet

snippet " "triple quoted string (double quotes)" b
`!p triple_quotes_handle_trailing(snip, '"')`
${1:${VISUAL}}$0
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "triple quoted string (single quotes)" b
`!p triple_quotes_handle_trailing(snip, "'")`
${1:${VISUAL}}$0
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet """ "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)`
${1:${VISUAL}}$0
`!p snip.rv = triple_quotes(snip)`
endsnippet
# }}}

# Imports: {{{1
snippet imp "import statement" b
import ${0:${VISUAL}}
endsnippet

snippet from "from package import module" b
from ${1:package} import ${0:module}
endsnippet

snippet ipy "Generic IPython import" b
from IPython import ${1:${VISUAL}} $0
endsnippet

snippet ipyeb "Embed IPython into your application." b
from IPython import ${1:embed; embed()} $0
endsnippet

snippet pp "Import and use pprint" bw
${1:${VISUAL:from pprint import pprint}}
pprint($2)$0
endsnippet

snippet pdb "Import and use pdb" b
${1:${VISUAL:import pdb; pdb.set_trace()}}
endsnippet

snippet ipdb "Import and use ipdb" b
${1:${VISUAL:import ipdb; ipdb.set_trace()}}
endsnippet

# ifmain guards:{{{1
snippet doctest "Doctest fun and ifmain block" b
def _test():
	import doctest
	doctest.testmod()


if __name__ == '__main__':
	_test()
endsnippet

snippet ifmain "ifmain. optionally adds in function call to argparser" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:${VISUAL:main()}}$0
endsnippet

# This is one that goes in my ifmain blocks all the time
snippet sysa "Copy sys.argv into a variable." w
args = sys.argv[:]
endsnippet

# Commonly used modules:{{{1

snippet timestamp "Produce a timestamp"
datetime.date.isoformat(${1:${VISUAL:datetime.datetime.now()}}) $0
endsnippet

snippet dirname "Find the directory the script is in"
os.path.dirname(os.path.realpath(${1:${VISUAL:__file__}})) $0
endsnippet

snippet pr "Print something"
print("${0:${VISUAL}}")
endsnippet

# Loops:{{{1

# TODO
snippet with "with expr - context manager" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
	${0:f.write(res.text)}$0
endsnippet

snippet while "while loop" b
while ${1:condition}:
	${0:pass}
endsnippet

snippet for "for loop" w
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

snippet from "from package import module" w
from ${1:{$VISUAL:package}} import ${0:module}
endsnippet

# if/elif/else: {{{2

snippet if "If" w
if ${1:$VISUAL}:
	$2
endsnippet

# TODO: How to make it so that we can just tab past the else condition if we don't need it? i suppose just use if
snippet ife "If / Else" w
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" w
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet elif "You should use ifee but just in case" w
elif ${1:condition}:
	${2:pass}
endsnippet

snippet else "You should use ife but just in case" w
else:
	${1:pass}
endsnippet

# try/except/finally:{{{2
snippet try "Try / Except" w
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" w
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" w
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" w
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

# Comprehensions:{{{1

# All of these has the 'b' option but none these snippets only expand the right
# hand side of a snippet. Why would they ever be at the beginning of a line??

snippet lc "List comprehension" w
[${1:value} for ${2:value} in ${3:iterable}]$0
endsnippet

snippet lci "List comprehension if. Commonly referred to as a filter" w
[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}]$0
endsnippet

snippet lcie "List comprehension if" w
[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0
endsnippet

snippet dc "Dictionary comprehension base" w
{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0
endsnippet

snippet dci "Dictionary comprehension if filter" w
{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0
endsnippet

snippet sc "Set comprehension base" w
{${1:value} for ${2:value} in ${3:iterable}}$0
endsnippet

snippet sci "Set comprehension if filter" w
{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0
endsnippet

snippet gc "Generator comprehension" w
(${1:key} for ${2:value} in ${3:iterable})$0
endsnippet

# YESSSS! If you wrap the statements you want inside the snippet
# in visual mode, tab over, then type usnip and tab again
# it builds your snippet almost perfectly. Just fill in the triggerword
# and the description and you're fucking golden

snippet gci "Generator comprehension if filter" w
(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0
endsnippet


# Well that was probably a lot to handle. Let's go through some examples.

# Let's take a string and remove the vowels.
# In the future you can easily repurpose the idea to modify an object as necessary

# Admittedly this is too specific but as time passes I'll generalize
snippet gcstr "A generator comprehension that inputs and outputs a string" b
nonvowels = ''.join(i for i in sentence if not i in vowels)
endsnippet


# Search for .txt files in your current dir
snippet lcfiles "Return a list of all of the files with a certain suffix in the cwd" b
files = os.path.join(${1:os.cwd}) for f in os.listdir({$1}) if f.endswith(${2:'.txt'})
endsnippet


# Now let's read in data from a csv file and store it in a list of dictionaries
snippet lccsv "List comprehension for csv files" b
data = [ x for x in csv.DictReader(open(${1:tmp.csv}, ${2:'rU'}) ]
endsnippet
# As a reminder, r means open in read mode and U means accept universal newlines
# \n or \r or \r\n


# Functions:{{{1
snippet deff "function with default self arg" w
def ${1:${VISUAL}}(`!p snip.rv = vim.eval('indent(".") ? "self" : ""')`$2):
endsnippet

snippet def "function with docstrings. utilizes numpy Parameters." b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${3:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet

# Class & Special Method Name Snippets:{{{1

# A lot of these could easily be broken up into a lot more sections and there
# would be no damage done

# Amazed i havent done this one before
snippet super "The most boilerplatey thing about python"
super().__init__(${1:*args}, ${2:**kwargs})
endsnippet

# Class: {{{2
snippet class "class with docstrings" b
class ${1:MyClass}${2:(object)}:
	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`

<<<<<<< HEAD
	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
||||||| be92d71
<<<<<<< Updated upstream
	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
||||||| constructed merge base
	def __init__(self$4):
	`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
=======
	def __init__(self$4):
	`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
>>>>>>> Stashed changes
=======
<<<<<<< Updated upstream
	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
||||||| constructed merge base
	def __init__(self$4):
	`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
=======
	def __init__(self$4):
	`!p snip.rv = triple_quotes(snip)`${5: {to be defined:$1.}}`!p
>>>>>>> Stashed changes
>>>>>>> master
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet

# Slot's Class: {{{2
snippet slotclass "class with slots and docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

write_init_body(args, t[2], snip)
`
		$0
endsnippet

# Wall of Unending Dunder Methods: {{{
snippet contain "methods for emulating a container type" b
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
endsnippet

snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet

# These dunder methods are good for customized classes but what happens when
# we need to make the function call?
snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet

snippet get "Get an attribute"
getattr(${1:object}, ${2:attr})
endsnippet

snippet set "Set an attribute"
setattr(${1:object}, ${2:attr}, ${3:value})
endsnippet

snippet has "Show existence of an attribute"
hasattr(${1:object}, ${2:attr})
endsnippet

snippet desc "methods implementing descriptors" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet

# cmp: {{{
snippet cmp "methods implementing rich comparison"
def __eq__(self, other):
	${1:pass}

def __ne__(self, other):
	${2:pass}

def __lt__(self, other):
	${3:pass}

def __le__(self, other):
	${4:pass}

def __gt__(self, other):
	${5:pass}

def __ge__(self, other):
	${6:pass}

def __cmp__(self, other):
	${7:pass}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
endsnippet

# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
# Numeric: {{{
snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}

def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}

def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}

def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __ab__(self):
	${17:pass}

def __invert__(self):
	${18:pass}

def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}

def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}

def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
endsnippet

# }}}

# Properties: {{{1

snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
def ${1:name}():
	`!p snip.rv = triple_quotes(snip) if t[2] else ''
`${2:TODO: Docstring for $1.}`!p
if t[2]:
	snip >> 1

	style = get_style(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)
else:
	snip.rv = ""`
	def fget(self):
		return self._$1$0

	def fset(self, value):
		self._$1 = value
	return locals()

$1 = property(**$1(), doc=$1.__doc__)
endsnippet

# Assertions & Tests:{{{1

snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:${VISUAL:func}}${3/.+/, /}${3:arguments})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

snippet test "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):
	`!p snip.rv = triple_quotes(snip)`${3:Test case docstring.}`!p snip.rv = triple_quotes(snip)`

	def ${1:setUp}(`!p
	if snip.indent:
		snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
		`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
	write_function_docstring(t, snip) `
		${5:${VISUAL:pass}}
			${4:pass}
	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		`!p snip.rv = triple_quotes(snip)`${8:Test mod docstring.}`!p snip.rv = triple_quotes(snip)`
		${7:${VISUAL:pass}}
endsnippet

snippet testmain "Nested unittest snippet." b
${1:ifmain}
unittest.main()
endsnippet

################
#  Postfixes:  # {{{
################


# Found in the help docs. Say you forget to write return? Use this and you can
# add it after the fact!!

# Here's an example:
# value.return<tab> ->
# return value

snippet "([^\s].*)\.return" "Return (postfix)" r
return `!p snip.rv = match.group(1)`$0
endsnippet

# Somehow missed this one too! On lines 1012 of UltiSnips.txt
# Can you use that in a sentence please?

# something.par<tab> ->
# (something)

snippet "(\w+).par" "Parenthesis (postfix)" r
(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet "([^\s].*)\.dir" "Dir (postfix)" r
dir(`!p snip.rv = match.group(1)`)$0
endsnippet

# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.${1:${VISUAL}}$0
endsnippet

# Vim: set et ts=4:
