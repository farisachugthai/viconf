# ============================================================================
# File: vim.snippets
# Author: Faris Chugthai
# Description: Vim Snippets:
# Last Modified: April 27, 2019
# ============================================================================

#########################
#    Personal snippets  #
#########################

snippet path "Refer to a file in the same dir as the script."
${1:let ${2:${VISUAL:s:local_vimrc}} = }}fnamemodify(resolve(expand('${3:<sfile>}')), '${4::p:h}')
endsnippet

snippet gvar "Global / configuration variable" b
if !exists('g:${1:${VISUAL}}')
  let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "Script reload guard. Good to put directly under the header snippet." b
" Guard: {{{1
if exists('${1:b:loaded_`!p snip.rv = snip.fn.replace('.','_')`}') || ${2:&compatible} || ${3:v:version < 700}
    finish
endif
let $1 = ${4:1}
endsnippet

snippet plugin "Plugin reload guard." b
if exists('g:did_`!p snip.rv = snip.basename.replace('.', '_')`') || &compatible || v:version < 700
  finish
endif
let g:did_`!p snip.rv = snip.basename.replace('.', '_')` = 1
endsnippet

# FUCKKKKK i've been using lower case c thinking it was the line continuation one :(
snippet cpo "compatability options"
let s:cpo_save = &cpoptions
set cpoptions-=C

let &cpoptions = s:cpo_save
unlet s:cpo_save
endsnippet

snippet fun "function with simple tabstops" b
function! ${1:function_name}($2) abort
  ${3:'code'}
endfunction$0
endsnippet

snippet header "standard Vim script file header" b
" ============================================================================
  " File: ${1:`!v expand('%:t')`}
  " Author: ${2:`!v g:snips_author`}
  " Description: ${3:${VISUAL:A description of the file below}}
  ${4:" Last Modified: `!v strftime("%B %d, %Y")`}$0
" ============================================================================
endsnippet

# Yay! First successful use of a regex
snippet "ft(plugin)?" "Ftplugin guard" br
if exists('b:did_ftplugin') | finish | endif
let b:did_ftplugin = 1

let b:undo_ftplugin = 'setlocal $1'
      \ . '|unlet! b:undo_ftplugin'
endsnippet

snippet syntax "Syntax file guard" b
if v:version < 600
  syntax clear
elseif exists(${1:'b:current_syntax'})
  finish
endif

let ${2:b:current_syntax} = 1
endsnippet

snippet func "Autocompletes function name based on filename" b
function! ${1:`expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3}) abort
    ${0}
endif
endsnippet

snippet try "try ... catch statement. Defaults to catch everything" mib
try
  ${1:${VISUAL}}
catch ${2:/.*/}
  $0
endtry
endsnippet

###############
#  Help Docs  #
###############

global !p
def sec_title(snip, t):
  file_start = snip.fn.split('.')[0]
  sec_name = t[1].strip("1234567890. ").lower().replace(' ', '-')
  return ("*%s-%s*" % (file_start, sec_name)).rjust(78-len(t[1]))
endglobal

snippet sec "Section marker" b
==============================================================================
${1:SECTION}`!p snip.rv = sec_title(snip, t)`
endsnippet

snippet ssec "Sub section marker" b
${1:Subsection}`!p snip.rv = sec_title(snip, t)
snip += "-"*len(t[1])`
endsnippet

snippet sssec "Subsub Section marker" b
${1:SubSubsection}:`!p snip.rv = sec_title(snip, t)`
endsnippet

snippet helpline "Vim help modeline"
`!v 'vim'`:tw=78:ts=8:ft=help:norl:
endsnippet

snippet modeline "Vim help modeline"
`!v 'vim'`:tw=78:ts=8:ft=help:norl:
endsnippet

###########
#  loops  #
###########

snippet for "for ... in loop"
for ${1} in ${2}
  ${0:${VISUAL}}
endfor
endsnippet

snippet for "for [key, value] in loop"
for [${1},${2}] in items(${3})
  ${0}
  unlet $1 $2
endfor
endsnippet

snippet wh "while loop"
while ${1}
  ${0:${VISUAL:body}}
endw
endsnippet

snippet if "if statement" b
if ${1}
  ${0:${VISUAL:body}}
endsnippet

snippet elif "elif by vim" b
elseif ${1}
  ${0:${VISUAL:body}}
endsnippet

snippet else "else" w
else
  $0
endif
endsnippet

# I realize its weird to have the if and else in there but then you can expand
# the if else snippets i have above
snippet ife "if ... else statement" w
${0:if}

${1:else}
endsnippet

snippet aug "augroup ... autocmd block." b
augroup ${1:AU_NAME}
  autocmd!
  ${2:au}$0
augroup end
endsnippet

snippet au "bare autocmd" b
autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
endsnippet

#####################
#  plugin managers  #
#####################

snippet bun "Vundle.vim Plugin definition"
Plugin '${0:${VISUAL}}'
endsnippet

snippet plug "vim-plug Plugin definition" b
Plug '${0:${VISUAL}}'
endsnippet

snippet plugdo "vim-plug Plugin definition with { 'do': '' }" b
Plug '${1:${VISUAL}}', { 'do': '${0}' }
endsnippet

snippet plug "vim-plug Plugin definition with { 'on': '' }" b
Plug '${1:${VISUAL}}', { 'on': '${0}' }
endsnippet

snippet plug "vim-plug Plugin definition with { 'for': '' }" b
Plug '${1:${VISUAL}}', { 'for': '${0}' }
endsnippet

snippet plug "vim-plug Plugin definition with { 'branch': '' }" b
Plug '${1:${VISUAL}}', { 'branch': '${0}' }
endsnippet

snippet plug "vim-plug Plugin definition with { 'tag': '' }" b
Plug '${1:${VISUAL}}', { 'tag': '${0}' }
endsnippet

#############
#  options  #
#############

snippet letg "let buffer local var = val"
let g:${1:${VISUAL}} = ${0:value}
endsnippet

snippet letb "let buffer local var = val"
let b:${1:${VISUAL}} = ${0:value}
endsnippet

snippet sg "setglobal"
setglobal  ${1:${VISUAL}}
endsnippet

snippet se "set a var"
set ${1:${VISUAL}}
endsnippet

snippet set "set a var=value"
set ${1:${VISUAL}}=${0:value}
endsnippet

# Mar 07, 2019: Shortened to sl because setl is barely shorter than actually typing setlocal
# Also the equal needed to be moved over so I could tab over it.
snippet sl "setlocal var=value" w
setlocal ${1:${VISUAL}}${2:=value}
endsnippet

#############
#  mapping  #
#############

snippet map "map var var CR" b
map ${<Leader>${1:${VISUAL}}} ${2}${3:<CR>}
endsnippet

snippet no "noremap var var CR" b
noremap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet nno "nnoremap var var CR" b
nnoremap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet vm "noremap var var CR" b
vmap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet vno "vnoremap var var CR" b
vnoremap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet im "imap var var CR" b
imap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet ino "inoremap var var CR" b
inoremap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet cm "cmap var var CR" b
cmap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet cnm "cnoremap var var CR" b
cnoremap ${1:${VISUAL}} ${2}${3:<CR>}
endsnippet

snippet exe "execute(var)" b
execute('${0:${VISUAL}}')
endsnippet

# Vim: set ts=4 sts=2 sw=2:
