priority 30

extends cs

snippet class "Powershell Class definition" b
class {
	[string] ${1:${VISUAL}FirstName}
}
endsnippet

snippet function "CmdletBinding with mandatory parameter definition" b
function ${1:${VISUAL}} {
	[CmdletBinding()]
	param (
		[Parameter(Mandatory = ${2:$true})]
		[string] ${3:Param}
	)

	begin {$4
	}

	process {$5
	}

	end {$6
	}
} $7
endsnippet

snippet spl "Powershell splatting. I don't know" smb
$Params = @{
	${1:Param1} = '$2'
	${3:Param2} = '$4'
}
${5:CommandName} ${6:@Params}
endsnippet

snippet enum "Powershell. Enumerate a dictionary looking data structure." b
enum ${1:name} {
	${2:item1}
	${3:item2}
}
endsnippet

# Control structures: {{{1
snippet if "Simple powershell if statement" b
if (${1:condition}) {
	${2:statement}
}
endsnippet

snippet ife "Powershell If else" b
if ( ${1:condition} ) {
	${2}
}
else {
	${3}
}
endsnippet

snippet while "Powershell while loop"  b
while (${1:condition}) {
	${2:statement}
}
endsnippet

snippet filtersort "PowerShell Filter..Sort" b
${1:command} | Where-Object -FilterScript { $PSItem.${2:property} -${3:operator} '${4:expression}' } | Sort-Object -Property ${5:sortproperty}
endsnippet

snippet foreach "PowerShell foreach" b
foreach ( $${1:iterator} in $${2:collection} ) {
	${3:statement}
}
endsnippet

snippet csv "PowerShell export-csv" b
Export-CSV -NoTypeInformation -Path ${1:path}
endsnippet

snippet help "Powershell Comment Based Help" b
<#
.SYNOPSIS
	${1:Short Description}
.DESCRIPTION
	${2:Full Description}
.PARAMETER ${3:Param1}
	${4: $3 usage}
.EXAMPLE
	${5:Example}
.NOTES
	${6:notes}
.LINK
	${7:online help}
#>
endsnippet

snippet switch "Powershell switch statement" b
switch ( ${1:test} ){
	${2:condition1} { ${3:action} }
	${4:condition2} { ${5:action} }
	default { ${6:action} }
endsnippet

# Vim: set ft=snippets.ps1:
