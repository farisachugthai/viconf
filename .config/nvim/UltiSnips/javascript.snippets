# Functions
# TODO: Outside of going over this file again, the inconsistent
# semicolon is gonna drive me nuts

snippet proto "prototype"
	${1:class_name}.prototype.${2:method_name} = function(${3}) {
		${0:${VISUAL}}
	};
endsnippet

snippet fun " Function"
	function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}
endsnippet

snippet anf "Anonymous Function" w
	function(${1}) {
		${0:${VISUAL}}
	}
endsnippet

snippet vaf " Anonymous Function assigned to variable"
	var ${1:function_name} = function(${2}) {
		${0:${VISUAL}}
	};
endsnippet

snippet vf "Function assigned to variable"
	var ${1:function_name} = function $1(${2}) {
		${0:${VISUAL}}
	};
endsnippet

snippet (f "Immediate function"
	(function(${1}) {
		${0:${VISUAL}}
	}(${2}));
endsnippet

snippet ;fe "Minify safe iife"
	;(function(${1}) {
		${0:${VISUAL}}
	}(${2}))
endsnippet

snippet sdf "self-defining function"
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0:${VISUAL}}
		};
	};
endsnippet

##################
#  Flow Control  #
##################

snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

snippet ter "tertiary conditional"
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet switch "switch case break default"
switch (${1:expression}) {
	case "${3:case}":
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case xyz: ... break"
case '${1:case}':
	${0:${VISUAL}}
	break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

snippet terr 'throw Error'
throw new Error('${1:error message}')
endsnippet

snippet ret "return"
return ${0:result};
endsnippet

snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
	}
endsnippet

snippet forr "reversed for (...) {...}"
	for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
		${0:${VISUAL}}
	}
endsnippet

snippet wh "(condition) { ... }"
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
endsnippet

snippet do "do { ... } while (condition)"
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
endsnippet

# For in loop
snippet fori
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}
endsnippet

#############
#  Objects  #
#############

# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0:${VISUAL}}
	},
endsnippet
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
endsnippet
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
endsnippet
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
endsnippet
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
endsnippet
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		'${2:property}',
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
# Documentation
endsnippet
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
endsnippet
	 */
snippet @par
endsnippet
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
endsnippet


# JSON


# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
endsnippet
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# DOM selectors
endsnippet
# Get elements
snippet get
	getElementsBy${1:TagName}('${0}')
endsnippet
# Get element
snippet gett
	getElementBy${1:Id}('${0}')
endsnippet
# Elements by class
snippet by.
	${1:document}.getElementsByClassName('${0:class}')
endsnippet
# Element by ID
snippet by#
	${1:document}.getElementById('${0:element ID}')
endsnippet
# Query selector
snippet qs
	${1:document}.querySelector('${0:CSS selector}')
endsnippet
# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet
# Debugging
snippet de
endsnippet
	debugger;
snippet cl "console.log"
endsnippet
	console.log(${0});
snippet cd "console.debug"
endsnippet
	console.debug(${0});
snippet ce "console.error"
endsnippet
	console.error(${0});
snippet cw "console.warn"
endsnippet
	console.warn(${0});
snippet ci "console.info"
endsnippet
	console.info(${0});
snippet ct "console.trace"
endsnippet
	console.trace(${0:label});
snippet ctime "console.time ... console.timeEnd"
	console.time("${1:label}");
	${0:${VISUAL}}
endsnippet
	console.timeEnd("$1");
snippet ctimestamp "console.timeStamp"
endsnippet
	console.timeStamp("${1:label}");
snippet ca "console.assert"
endsnippet
	console.assert(${1:expression}, ${0:obj});
snippet cclear "console.clear"
endsnippet
	console.clear();
snippet cdir "console.dir"
endsnippet
	console.dir(${0:obj});
snippet cdirx "console.dirxml"
endsnippet
	console.dirxml(${1:object});
snippet cgroup "console.group"
	console.group("${1:label}");
	${0:${VISUAL}}
endsnippet
	console.groupEnd();
snippet cgroupc "console.groupCollapsed"
	console.groupCollapsed("${1:label}");
	${0:${VISUAL}}
endsnippet
	console.groupEnd();
snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
endsnippet
	console.profileEnd();
snippet ctable "console.table"
	console.table(${1:"${2:value}"});
# Misc
endsnippet
# 'use strict';
snippet us
	'use strict';
endsnippet
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
endsnippet
