# python.snippets
priority 70

extends pandas
extends numpy_stat
extends rst

#######################################################################
#                           Python Snippets                           #
#######################################################################

priority 70

# Let's reorganize this in a similar manner to what someone would write as they're
# starting a new module.

# Start out with a shebang
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
$0
endsnippet

# Create a module docstring. We can rewrite this to conform to different
# docstring styles as needed

snippet docs "Module Docstring" b
	"""
	File: ${1:'foo.py'}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""
endsnippet

snippet pmdoc "pocoo style module doc string" b
# -*- coding: utf-8 -*-
"""
	`!p snip.rv = get_dir_and_file_name(snip)`
	`!p snip.rv = '~' * len(get_dir_and_file_name(snip))`

	${1:DESCRIPTION}

	:copyright: (c) `date +%Y` by ${2:YOUR_NAME}.
	:license: ${3:LICENSE_NAME}, see LICENSE for more details.
"""
$0
endsnippet

# import your modules
snippet imp "import statement" b
import ${0:module}
endsnippet

snippet from "from package import module" b
from ${1:package} import ${0:module}
endsnippet

snippet ipy "Embed ipython into your application." b
from IPython import embed; embed()
endsnippet

# Use our ifmain block to shield against stray global vars
snippet ifmain "ifmain. optionally adds in function call to argparser" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:_parse_arguments()}
	${2:${VISUAL:main()}}
endsnippet


#######################
#  personal snippets  #
#######################

# aka just more general snippets i wrote. not intended to follow the flow
# of the previous ones above
snippet doctest "Doctest fun and ifmain block" b
def _test():
	import doctest
	doctest.testmod()


if __name__ == '__main__':
	_test()
endsnippet

snippet timestamp "Produce a timestamp"
datetime.date.isoformat(datetime.datetime.now())
endsnippet

snippet dirname "Find the directory the script is in"
os.path.dirname(os.path.realpath(__file__))
endsnippet

snippet pprint "Import and use pprint" b
from pprint import pprint; pprint($1)
endsnippet

snippet pdb "Import and use pdb" b
import pdb; pdb.set_trace()
endsnippet

snippet ipdb "Import and use ipdb" b
import ipdb; ipdb.set_trace()
endsnippet

snippet home "Why isn't there a better way." b
home = os.path.expanduser("~")
endsnippet

snippet pr "Print something"
print("${0:var}")
endsnippet


###########
#  loops  #
###########

snippet ifmain "ifmain" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:${VISUAL:main()}}
endsnippet

snippet with "with expr - context manager" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
	${3:${VISUAL:pass}}
$0
endsnippet

# However I don't know what that says so let's simplify
# Let's also build this snippet around my most frequent use case
# requests.get()
snippet with "simpler context manager" b
with ${1:open} ${2:filename}, ${3:'xt'} as ${4:f}:
	${0:f.write(res.text)}
endsnippet


snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

snippet from "from package import module" b
	from ${1:package} import ${0:module}
endsnippet

####################
# If / Else / Elif #
####################

snippet if "If" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet elif "You should use ifee but just in case" b
elif ${1:condition}:
	${2:pass}
endsnippet

snippet else "You should use ife but just in case" b
else:
	${1:pass}
endsnippet


##########################
# Try / Except / Finally #
##########################

snippet try "Try / Except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet


######################################
#  other assorted control structures #
######################################

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
$0
endsnippet

snippet while "while loop" b
while ${1:condition}:
	${0:pass}
endsnippet

##############
#  argparse  #
##############

# not the most loqacoious i've ever been but it's better than not knowing
# what the hell a snippet is because the description for "with" is "with"
snippet argparse "Initialize ArgumentParser in def _parse_arguments" b
def _parse_arguments():
	parser = argparse.ArgumentParser(description=${1:__doc__})
	return parser.parse_args()
	$0
endsnippet

# The following is a snippet to determine the type of an object.
# Admittedly this is better suited for a REPL than vim but *shrugs*
snippet type "Wrap a statement with a type clause"
type(${VISUAL:1})
endsnippet

snippet argstrpos "Argparse positional argument for a string type." b
	parser.add_argument( ${VISUAL:var}, type=${1:str}, help=${2:Feed me input.})

endsnippet

snippet argpath "Add a pathlike object" b
	parser.add_argument(${1:-s}, ${2:--long}, dest= ${3: var},
						type=${4:pathlib.Path}, help=${5:RTFM})
endsnippet

snippet argpv "argument for version = %(prog)s" b
	parser.add_argument('--version', action = 'version',
			version = '%(prog)s 1.0')
endsnippet

snippet argp "snip that needs to be fixed" bst

import argparse

def parse_argument():
	parser = argparse.ArgumentParser()
	group = parser.add_mutually_exclusive_group()
	group.add_argument("-v", "--verbose", action="store_true")
	group.add_argument("-q", "--quiet", action="store_true")

	parser.add_argument('-v','--verbose', dest='verbosity', default=0, action="count",
			help="verbose mode (-vvv for more, -vvvv to enable connection debugging)")

	parser.add_argument('bar', nargs='+', help='bar positional arguments.')

	parser.add_argument('-s', action='store',
			dest='simple_value',
			help='Store a simple value'
			)

	parser.add_argument('-c', action='store_const',
			dest='constant_value',
			const='value-to-store',
			help='Store a constant value'
			)

	parser.add_argument('-t', action = 'store_true',
			default = False,
			dest = 'boolean_switch',
			help = 'Set a switch to true'
			)

	parser.add_argument('-f', action = 'store_false',
			default = False,
			dest = 'boolean_switch',
			help = 'Set a switch to false'
			)

	parser.add_argument('-a', action = 'append',
			dest = 'collection',
			default = [],
			help = 'Set a switch to false'
			)

	parser.add_argument('--version', action = 'version',
			version = '%(prog)s 1.0'
			)

	results = parser.parse_args()

	return results

	${0}
endsnippet



# Now let's try some comprehensions
#######################################################################
#                           Comprehensions                            #
#######################################################################

snippet lc "List comprehension" b
[${1:value} for {2:value} in ${3:iterable}]$0
endsnippet

snippet lci "List comprehension if. Commonly referred to as a filter" b
[${1:value} for {2:value} in ${3:iterable} if ${4:condition}]$0
endsnippet

snippet lcie "List comprehension if" b
[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0
endsnippet

snippet dc "Dictionary comprehension base" b
{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0
endsnippet

snippet dci "Dictionary comprehension if filter" b
{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0
endsnippet

snippet sc "Set comprehension base" b
{${1:value} for ${2:value} in ${3:iterable}}$0
endsnippet

snippet sci "Set comprehension if filter" b
{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0
endsnippet

snippet gc "Generator comprehension" b
(${1:key} for ${2:value} in ${3:iterable})$0
endsnippet

# YESSSS! If you wrap the statements you want inside the snippet
# in visual mode, tab over, then type usnip and tab again
# it builds your snippet almost perfectly. Just fill in the triggerword
# and the description and you're fucking golden
snippet gci "Generator comprehension if filter" b
(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0
endsnippet


# Well that was probably a lot to handle. Let's go through some examples.

# Let's take a string and remove the vowels.
# In the future you can easily repurpose the idea to modify an object as necessary

# Admittedly this is too specific but as time passes I'll generalize
snippet gcstr "A generator comprehension that inputs and outputs a string" b
nonvowels = ''.join(i for i in sentence if not i in vowels)
endsnippet


# Search for .txt files in your current dir
snippet lcfiles "Return a list of all of the files with a certain suffix in the cwd" b
files = os.path.join(${1:os.cwd}) for f in os.listdir({$1}) if f.endswith(${2:'.txt'})
endsnippet


# Now let's read in data from a csv file and store it in a list of dictionaries
snippet lccsv "List comprehension for csv files" b
data = [ x for x in csv.DictReader(open(${1:tmp.csv}, ${2:'rU'}) ]
endsnippet
# As a reminder, r means open in read mode and U means accept universal newlines
# \n or \r or \r\n





####################################################################
#  Snippets related to functions. Try them out and report back!    #
####################################################################

snippet deff "function with default self arg" b
def ${1:fname}(`!p snip.rv = vim.eval('indent(".") ? "self" : ""')`$2):
	$0
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3
GOOGLE  = 0x4
NUMPY   = 0x5
JEDI    = 0x6

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		self.name = arg.split('=')[0].strip()

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return '=' in self.arg


def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg.name != 'self']

	return args


def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")
	if not style:
		return get_quoting_style(snip) * 3
	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3

def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: …
		_, col = vim.current.window.cursor
		line = vim.current.line

		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break
			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret
	else:
		snip.rv = snip.c

def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")

	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	elif  style == "google": return GOOGLE
	elif  style == "numpy": return NUMPY
	elif  style == "jedi": return JEDI
	else: return NORMAL


def format_arg(arg, style):
	if style == DOXYGEN:
		return "@param %s TODO" % arg
	elif style == SPHINX:
		return ":param %s: TODO" % arg
	elif style == NORMAL:
		return ":%s: TODO" % arg
	elif style == GOOGLE:
		return "%s (TODO): TODO" % arg
	elif style == JEDI:
		return ":type %s: TODO" % arg
	elif style == NUMPY:
		return "%s : TODO" % arg


def format_return(style):
	if style == DOXYGEN:
		return "@return: TODO"
	elif style in (NORMAL, SPHINX, JEDI):
		return ":returns: TODO"
	elif style == GOOGLE:
		return "Returns: TODO"


def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(triple_quotes(snip))
		return

	snip.rv += '\n' + snip.mkline('', indent='')

	style = get_style(snip)

	if style == GOOGLE:
		write_google_docstring_args(args, snip)
	elif style == NUMPY:
		write_numpy_docstring_args(args, snip)
	else:
		for arg in args:
			snip += format_arg(arg, style)


def write_google_docstring_args(args, snip):
	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		snip += "Args:"
		snip.shift()
		for arg in args:
			snip += format_arg(arg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')

	if kwargs:
		snip += "Kwargs:"
		snip.shift()
		for kwarg in kwargs:
			snip += format_arg(kwarg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')


def write_numpy_docstring_args(args, snip):
	if args:
		snip += "Parameters"
		snip += "----------"

	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		for arg in args:
			snip += format_arg(arg, NUMPY)
	if kwargs:
		for kwarg in kwargs:
			snip += format_arg(kwarg, NUMPY) + ', optional'
	snip.rv += '\n' + snip.mkline('', indent='')


def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object']

	for p in parents:
		snip += p + ".__init__(self)"

	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')

	for arg in args:
		snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
	quote = get_quoting_style(snip)
	arg_format = quote + '_%s' + quote
	args = [arg_format % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)


def write_function_docstring(t, snip):
	"""
	Writes a function docstring with the current style.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	snip >> 1

	args = get_args(t[2])
	if args:
		write_docstring_args(args, snip)

	style = get_style(snip)

	if style == NUMPY:
		snip += 'Returns'
		snip += '-------'
		snip += 'TODO'
	else:
		snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

def get_dir_and_file_name(snip):
	return os.getcwd().split(os.sep)[-1] + '.' + snip.basename

endglobal

########################################
# Class & Special Method Name Snippets #
########################################

snippet class "class with docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined1.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet slotclass "class with slots and docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet contain "methods for emulating a container type" b
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
endsnippet


snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet


# These dunder methods are good for customized classes but what happens when
# we need to make the function call?
snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet

snippet getattr "Get an attribute"
getattr(${1:object}, ${2,attr})
endsnippet

snippet setattr "Set an attribute"
setattr(${1:object}, ${2,attr}, ${3:value})
endsnippet

snippet hasattr "Show existence of an attribute"
hasattr(${1:object}, ${2,attr})
endsnippet

snippet desc "methods implementing descriptors" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet


snippet cmp "methods implementing rich comparison"
def __eq__(self, other):
	${1:pass}

def __ne__(self, other):
	${2:pass}

def __lt__(self, other):
	${3:pass}

def __le__(self, other):
	${4:pass}

def __gt__(self, other):
	${5:pass}

def __ge__(self, other):
	${6:pass}

def __cmp__(self, other):
	${7:pass}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
endsnippet


# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}


def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}


def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}


def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}


def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}


def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}


def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
endsnippet


# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet


##############
# PROPERTIES #
##############

snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
def ${1:name}():
	`!p snip.rv = triple_quotes(snip) if t[2] else ''
`${2:TODO: Docstring for $1.}`!p
if t[2]:
	snip >> 1

	style = get_style(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)
else:
	snip.rv = ""`
	def fget(self):
		return self._$1$0

	def fset(self, value):
		self._$1 = value
	return locals()

$1 = property(**$1(), doc=$1.__doc__)
endsnippet


######################
# Assertions & Tests #
######################

snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:${VISUAL:func}}${3/.+/, /}${3:arguments})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

snippet testcase "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):

	`!p snip.rv = triple_quotes(snip)`${3:Test case docstring.}`!p snip.rv = triple_quotes(snip)`

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:${VISUAL:pass}}
endsnippet

snippet " "triple quoted string (double quotes)" b
"""
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "triple quoted string (single quotes)" b
'''
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet doc "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)`
${1:${VISUAL:doc}}
`!p snip.rv = triple_quotes(snip)`
endsnippet

# vim:ft=snippets:
