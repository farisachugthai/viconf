# Vim Snippets

##################################################################
#                           UltiSnips                            #
##################################################################

snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = $3
endsnippet

snippet function "function with simple tabstops" b
function! ${1:function_name}($2) abort
	${3:" code}
endf
endsnippet

#######################################################################
#                              Snipmate                               #
#######################################################################

snippet header "standard Vim script file header" b
	" File: ${1:`expand('%:t')`}
	" Author: ${2:`g:snips_author`}
	" Description: ${3}
	${0:" Last Modified: `strftime("%B %d, %Y")`}
snippet guard script reload guard
	if exists('${1:did_`vim_snippets#Filename()`}') || &cp${2: || version < 700}
		finish
	endif
	let $1 = 1${0}

endsnippet

snippet func "Autocompletes funxction name based on filename...I think"
function! ${1:`expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3}) abort
		${0}
endif
endsnippet

snippet try "try ... catch statement"
	try
		${1:${VISUAL}}
	catch ${2}
		${0}
	endtry
endsnippet

###########
#  loops  #
###########

snippet for "for ... in loop"
	for ${1} in ${2}
		${0:${VISUAL}}
	endfor
endsnippet

snippet forkv "for [key, value] in loop"
	for [${1},${2}] in items(${3})
		${0}
		unlet $1 $2
	endfor
endsnippet

snippet wh "while loop"
	while ${1}
		${0:${VISUAL}}
	endw
endsnippet

snippet if "if statement"
	if ${1}
		${0:${VISUAL}}
	endif
endsnippet

# TODO: Use rhis style of snippet a few timesandlet me know if ota better to put vosjal on the condktiln or the code.
snippet elif "elif by vim" b
	elseif ${VISUAL:1}
		${0:body}
endsnippet

snippet ife "if ... else statement"
	if ${1}
		${2:${VISUAL}}
	else
		${0}
	endif
endsnippet

snippet au "augroup ... autocmd block"
	augroup ${1:AU_NAME}
		autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
	augroup end
endsnippet

snippet bun "Vundle.vim Plugin definition"
	Plugin '${0}'
endsnippet

snippet plug "vim-plug Plugin definition"
	Plug '${0}'
endsnippet

snippet plugdo "vim-plug Plugin definition with { 'do': '' }"
	Plug '${1}', { 'do': '${0}' }
endsnippet

snippet plugon "vim-plug Plugin definition with { 'on': '' }"
	Plug '${1}', { 'on': '${0}' }
endsnippet

snippet plugfor "vim-plug Plugin definition with { 'for': '' }"
	Plug '${1}', { 'for': '${0}' }
endsnippet

snippet plugbr "vim-plug Plugin definition with { 'branch': '' }"
	Plug '${1}', { 'branch': '${0}' }
endsnippet

snippet plugtag "vim-plug Plugin definition with { 'tag': '' }"
	Plug '${1}', { 'tag': '${0}' }
endsnippet

snippet letg
	let g:${1:variable} = ${0: value}
endsnippet

snippet letb
	let b:${1:variable} = ${0: value}
endsnippet

snippet se
	set ${1:setting};
endsnippet

snippet set
	set ${1:setting}=${0:value}
endsnippet

snippet setl
	setlocal ${1:setting}=${0:value}
endsnippet

snippet nno
	nnoremap ${1} ${2}<CR>
endsnippet

snippet no
	noremap ${1} ${2}
endsnippet

snippet vm
	vnoremap ${1} ${2}
endsnippet

snippet im
	inoremap ${1} ${2}
endsnippet

snippet exe
	execute('${VISUAL:1}')
endsnippet

# vim:ft=snippets:
