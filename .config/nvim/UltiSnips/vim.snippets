# Vim Snippets:

# TODO Use this funcs as snips and you'll be set for help files
# https://github.com/google/vimdoc/blob/master/vimdoc/output.py

#########################
#  # Personal snippets  #
#########################


snippet path "Refer to a file in the same dir as the script."
${1:'let ${2:${VISUAL:s:local_vimrc}}' = }}fnamemodify(resolve(expand('${3:<sfile>}')), '${4::p:h}')
endsnippet

snippet gvar "Global / configuration variable" b
if !exists('g:${1:MyUltraImportantVar}')
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "Script reload guard. Good to put directly under the header snippet." b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || ${2:&cp} || ${3:v:version < 700}
	finish
endif
let $1 = ${4:1}
endsnippet

snippet plugin "Plugin reload guard. Newly minted so be observant of bugs." s
if !has_key(plugs, '${1:${VISUAL}`!p snip.rv = snip.basename.replace('.', '_')`}')
	finish
endif

if exists('g:did_`!p snip.rv = snip.basename.replace('.', '_')`') || &compatible || v:version < 700
	finish
endif
let g:did_`!p snip.rv = snip.basename.replace('.', '_')` = 1

endsnippet

snippet cpo "compatability options"
let s:cpo_save = &cpoptions
set cpoptions&vim

let &cpoptions = s:cpo_save
unlet s:cpo_save
endsnippet

snippet function "function with simple tabstops" b
function! ${1:function_name}($2) abort
	${3:'code'}
endfunction
$0
endsnippet

snippet header "standard Vim script file header"
" ============================================================================
	" File: ${1:`!v expand('%:t')`}
	" Author: ${2:`!v g:snips_author`}
	" Description: ${3:${VISUAL:A description of the file below}}
	${0:" Last Modified: `!v strftime("%B %d, %Y")`}
" ============================================================================
endsnippet

snippet ft "Ftplugin guard" bs
if exists('b:did_ftplugin') | finish | endif
let b:did_ftplugin = 1

$1

let b:undo_ftplugin = '${2:setl cms< com< fo<}' $0
endsnippet

snippet syn "Syntax file guard" b
if version < 600
	syntax clear
elseif exists(${1:'b:current_syntax'})
	finish
endif

let b:current_syntax = 1
$0
endsnippet

snippet func "Autocompletes function name based on filename"
function! ${1:`expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3}) abort
		${0}
endif
endsnippet

snippet try "try ... catch statement"
try
	${1:${VISUAL}}
catch ${2}
	${0}
endtry
endsnippet

###############
#  Help Docs  #
###############

global !p
def sec_title(snip, t):
	file_start = snip.fn.split('.')[0]
	sec_name = t[1].strip("1234567890. ").lower().replace(' ', '-')
	return ("*%s-%s*" % (file_start, sec_name)).rjust(78-len(t[1]))
endglobal

snippet sec "Section marker" sb
==============================================================================
${1:SECTION}`!p snip.rv = sec_title(snip, t)`
endsnippet

snippet ssec "Sub section marker" sb
${1:Subsection}`!p snip.rv = sec_title(snip, t)
snip += "-"*len(t[1])`
endsnippet

snippet sssec "Subsub Section marker" sb
${1:SubSubsection}:`!p snip.rv = sec_title(snip, t)`
endsnippet

snippet helpline "Vim help modeline"
`!v 'vim'`:tw=78:ts=8:ft=help:norl:
endsnippet

snippet modeline "Vim help modeline"
`!v 'vim'`:tw=78:ts=8:ft=help:norl:
endsnippet

###########
#  loops  #
###########

snippet for "for ... in loop" s
for ${1} in ${2}
	${0:${VISUAL}}
endfor
endsnippet

snippet for "for [key, value] in loop" s
for [${1},${2}] in items(${3})
	${0}
	unlet $1 $2
endfor
endsnippet

snippet wh "while loop" s
while ${1}
	${0:${VISUAL:body}}
endw
endsnippet

# does it need to be nested like that? test and come back.
snippet if "if statement" s
if ${1}
	${0:${VISUAL:body}}
endif
endsnippet

# **TODO**: Use this style of snippet a few times and let me know if it's better to
# put $VISUAL on the condition or the code.
snippet elif "elif by vim" bs
elseif ${1}
	${0:${VISUAL:body}}
endsnippet

snippet ife "if ... else statement" s
if ${1}
	${2:${VISUAL:body}}
else
	$0
endif
endsnippet

snippet aug "augroup ... autocmd block" bs
augroup ${1:AU_NAME}
	autocmd!
	autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} $0
augroup end
endsnippet

snippet au "bare autocmd" bs
autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
endsnippet

#####################
#  plugin managers  #
#####################

snippet bun "Vundle.vim Plugin definition"
Plugin '${VISUAL:0}'
endsnippet

snippet plug "vim-plug Plugin definition" bs
Plug '${VISUAL:0}'
endsnippet

snippet plugdo "vim-plug Plugin definition with { 'do': '' }" bs
Plug '${VISUAL:1}', { 'do': '${0}' }
endsnippet

snippet plugon "vim-plug Plugin definition with { 'on': '' }" bs
Plug '${VISUAL:1}', { 'on': '${0}' }
endsnippet

snippet plugfor "vim-plug Plugin definition with { 'for': '' }" bs
Plug '${VISUAL:1}', { 'for': '${0}' }
endsnippet

snippet plugbr "vim-plug Plugin definition with { 'branch': '' }" bs
Plug '${VISUAL:1}', { 'branch': '${0}' }
endsnippet

snippet plugtag "vim-plug Plugin definition with { 'tag': '' }" bs
Plug '${VISUAL:1}', { 'tag': '${0}' }
endsnippet

#############
#  options  #
#############

snippet letg "let buffer local var = val"
let g:${1:variable} = ${0: value}
endsnippet

snippet letb "let buffer local var = val"
let b:${1:variable} = ${0: value}
endsnippet

snippet se "set a var"
set ${1:setting}
endsnippet

snippet set "set a var=value"
set ${1:setting}=${0:value}
endsnippet

# Mar 07, 2019: Shortened to sl because setl is barely shorter than actually typing setlocal
# Also the equal needed to be moved over so I could tab over it.
snippet sl "setlocal var=value" w
setlocal ${1:setting}${2:=value}$0
endsnippet

#############
#  mapping  #
#############

snippet m "map var var CR" bs
map ${<Leader>${1}} ${2}${3:<CR>}
endsnippet

snippet no "noremap var var CR" bs
noremap ${1} ${2}${3:<CR>}
endsnippet

snippet nno "nnoremap var var CR" bs
nnoremap ${1} ${2}${3:<CR>}
endsnippet

snippet vm "noremap var var CR" bs
vmap ${1} ${2}${3:<CR>}
endsnippet

snippet vno "vnoremap var var CR" bs
vnoremap ${1} ${2}${3:<CR>}
endsnippet

snippet im "imap var var CR" bs
imap ${1} ${2}${3:<CR>}
endsnippet

snippet ino "inoremap var var CR" bs
inoremap ${1} ${2}${3:<CR>}
endsnippet

snippet cm "cmap var var CR" bs
cmap ${1} ${2}${3:<CR>}
endsnippet

snippet cnm "cnoremap var var CR" bs
cnoremap ${1} ${2}${3:<CR>}
endsnippet

snippet exe "execute(var)" b
execute('${VISUAL:1}')
endsnippet
