# Vim Snippets
# TODO Use this funcs as snips and you'll be set for help files
# https://github.com/google/vimdoc/blob/master/vimdoc/output.py
# Personal snippets

snippet path "Refer to a file in the same dir as the script."
${${1:'let s:local_vimrc' = }}fnamemodify(resolve(expand('<sfile>')), ':p:h').'${VISUAL:0}'
endsnippet

snippet gvar "Global / configuration variable" b
if !exists('g:${1:MyUltraImportantVar}')
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || ${2:&cp} || ${3:v:version < 700}
	finish
endif
let $1 = ${4:1}
endsnippet

# I feel like this is implemented wrong.
snippet cpo "compatability options"
let s:cpo_save = &cpo
set cpo&vim

let &cpo = s:cpo_save
unlet s:cpo_save
endsnippet

snippet function "function with simple tabstops" b
function! ${1:function_name}($2) abort
	${3:"code"}
endfunction
$0
endsnippet

# THIS HEADER WORKS THE EXACT WAY YOU'D WANT WHOO
snippet header "standard Vim script file header"
" ============================================================================
	" File: ${1:`!v expand('%:t')`}
	" Author: ${2:`!v g:snips_author`}
	" Description: ${3:"A description of the file below"}
	${0:" Last Modified: `!v strftime("%B %d, %Y")`}
" ============================================================================
endsnippet

# how do I put a line at the end of a doc? the let statement can stay there
# but it would be nice
snippet ft "Ftplugin guard" b
if version < 600
	syntax clear
elseif exists(${1:"b:current_syntax"})
	finish
endif
$0
endsnippet

snippet syn "Syntax file guard" b
if version < 600
	syntax clear
elseif exists(${1:"b:current_syntax"})
	finish
endif

let b:current_syntax = 1
$0
endsnippet

# snippet guard "script reload guard"
# Btw this snippet is really wonky. Doesn't really execute right.
# However I've definitely seen plugins with the did_plugin thing idiom so hold
# onto it for a lil
#	if exists('${1:did_`vim_snippets#Filename()`}') || &cp${2: || version < 700}
#		finish
#	endif
#	let ${1:loaded_`!p snip.fn`} = ${0:'1'}
# endsnippet


snippet func "Autocompletes function name based on filename"
function! ${1:`expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3}) abort
		${0}
endif
endsnippet

snippet try "try ... catch statement"
try
	${1:${VISUAL}}
catch ${2}
	${0}
endtry
endsnippet

###############
#  Help Docs  #
###############

global !p
def sec_title(snip, t):
	file_start = snip.fn.split('.')[0]
	sec_name = t[1].strip("1234567890. ").lower().replace(' ', '-')
	return ("*%s-%s*" % (file_start, sec_name)).rjust(78-len(t[1]))
endglobal

snippet sec "Section marker" b
==============================================================================
${1:SECTION}`!p snip.rv = sec_title(snip, t)`

$0
endsnippet

snippet ssec "Sub section marker" b
${1:Subsection}`!p snip.rv = sec_title(snip, t)
snip += "-"*len(t[1])`

$0
endsnippet

snippet sssec "Subsub Section marker" b
${1:SubSubsection}:`!p snip.rv = sec_title(snip, t)`

$0
endsnippet

# For vim help, follow the same settings as the official docs.
snippet helpline "Vim help modeline"
`!v 'vim'`:tw=78:ts=8:ft=help:norl:
endsnippet

snippet modeline "Vim help modeline"
`!v 'vim'`:tw=78:ts=8:ft=help:norl:
endsnippet

###########
#  loops  #
###########

snippet for "for ... in loop" s
for ${1} in ${2}
	${0:${VISUAL}}
endfor
endsnippet

snippet for "for [key, value] in loop" s
for [${1},${2}] in items(${3})
	${0}
	unlet $1 $2
endfor
endsnippet

snippet wh "while loop" s
while ${1}
	${0:${VISUAL:body}}
endw
endsnippet

# does it need to be nested like that? test and come back.
snippet if "if statement" s
if ${1}
	${0:${VISUAL:body}}
endif
endsnippet

# **TODO**: Use this style of snippet a few times and let me know if it's better to
# put $VISUAL on the condition or the code.
snippet elif "elif by vim" bs
elseif ${1}
	${0:${VISUAL:body}}
endsnippet

snippet ife "if ... else statement" s
if ${1}
	${2:${VISUAL:body}}
else
	$0
endif
endsnippet

snippet aug "augroup ... autocmd block" bs
augroup ${1:AU_NAME}
	autocmd!
	autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} $0
augroup end
endsnippet

snippet au "bare autocmd" bs
autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
endsnippet

#####################
#  plugin managers  #
#####################

snippet bun "Vundle.vim Plugin definition"
Plugin '${VISUAL:0}'
endsnippet

snippet plug "vim-plug Plugin definition" bs
Plug '${VISUAL:0}'
endsnippet

snippet plugdo "vim-plug Plugin definition with { 'do': '' }" bs
Plug '${VISUAL:1}', { 'do': '${0}' }
endsnippet

snippet plugon "vim-plug Plugin definition with { 'on': '' }" bs
Plug '${VISUAL:1}', { 'on': '${0}' }
endsnippet

snippet plugfor "vim-plug Plugin definition with { 'for': '' }" bs
Plug '${VISUAL:1}', { 'for': '${0}' }
endsnippet

snippet plugbr "vim-plug Plugin definition with { 'branch': '' }" bs
Plug '${VISUAL:1}', { 'branch': '${0}' }
endsnippet

snippet plugtag "vim-plug Plugin definition with { 'tag': '' }" bs
Plug '${VISUAL:1}', { 'tag': '${0}' }
endsnippet

#############
#  options  #
#############

snippet letg "let buffer local var = val"
let g:${1:variable} = ${0: value}
endsnippet

snippet letb "let buffer local var = val"
let b:${1:variable} = ${0: value}
endsnippet

snippet se "set a var"
set ${1:setting}
endsnippet

snippet set "set a var=value"
set ${1:setting}=${0:value}
endsnippet

snippet setl "setlocal var=value"
setlocal ${1:setting}=${0:value}
endsnippet

#############
#  mapping  #
#############

snippet m "map var var CR" bs
map ${<Leader>${1}} ${2}${3:<CR>}
endsnippet

snippet no "noremap var var CR" bs
noremap ${1} ${2}${3:<CR>}
endsnippet

snippet nno "nnoremap var var CR" bs
nnoremap ${1} ${2}${3:<CR>}
endsnippet

snippet vm "noremap var var CR" bs
vmap ${1} ${2}${3:<CR>}
endsnippet

snippet vno "vnoremap var var CR" bs
vnoremap ${1} ${2}${3:<CR>}
endsnippet

snippet im "imap var var CR" bs
imap ${1} ${2}${3:<CR>}
endsnippet

snippet ino "inoremap var var CR" bs
inoremap ${1} ${2}${3:<CR>}
endsnippet

snippet cm "cmap var var CR" bs
cmap ${1} ${2}${3:<CR>}
endsnippet

snippet cnm "cnoremap var var CR" bs
cnoremap ${1} ${2}${3:<CR>}
endsnippet

snippet exe "execute(var)" b
execute('${VISUAL:1}')
endsnippet
