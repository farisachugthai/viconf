# sh.snippets
# I've attempted to organize these in the order someone would
# need to use them in

# Need to continue after else

#######################################################################
#                      # Your personal snippets                       #
#######################################################################

# Shebang. Good place to start
snippet #! "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "# Maintainer: Faris Chugthai \n" `
# set -euo pipefail
endsnippet

# Check command line arguments
snippet ifempty "If loop echoes help guide if no CLAs" b
if [[ -z "$1" ]]; then
	echo -e "Usage: $0 [options] commands"
	exit 2
fi
endsnippet

snippet ec(ho) "Echo a statement" r
echo -e ${VISUAL:$1}
endsnippet

snippet read "Read input from a user" b
read ${VISUAL:$1}
endsnippet

###########
#  Loops  #
###########

snippet if "if ... then (if)" b
if ${3:[[ ${2:condition} ]]}; then
	${1:expression}
${0:possibly good time to expand elseif or else}
fi
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet else "else statement" b
else
	${0}
endsnippet

###############
#  functions  #
###############

snippet termuxdeps "Check for dependencies on termux" b
checkdeps() {
	printf "${1:BLUE}\n"
	echo -e " [*] Updating apt cache...\n"
	pkg up -y &> /dev/null
	echo -e " [*] Checking for all required tools...\n"

	for ${VISUAL:3} in ${2:pkg}; do
		if [ -e $PREFIX/bin/$i ]; then
			echo -e " â€¢ \$$3 is OK\n"
		else
			echo -e "Installing \$$3...\n"
			pkg install -y \$$3 || {
				printf "$RED"
				echo -e " ERROR: check your internet connection or apt\n Exiting...\n"
				printf "$reset"
				exit 1
			}
		fi
	done
}
endsnippet

# TODO: Get more params from ~/.config/curlrc. Possibly think about making a
# local var for curl options so you only have to type once.
snippet curl "cURL a file" b
getfile() {
	printf "$BLUE [*] Getting ${1:filename}...$reset\n\n"
	curl --progress-bar -L --fail --retry 4 -o ${1:filename} ${2:url}
	printf "\n${BLUE} [*] Getting SHA ... $reset\n\n"
	curl --progress-bar -L --fail --retry 4 -O "${2:url}.sha256"
}
endsnippet

# TODO: Theres a section in man bash that explains which error codes to use for
# What situations. Review and change `exit 1`.
snippet sha256 "Check a cURLed file with sha256" b
checkintegrity() {
	printf "\n${BLUE} [*] Checking integrity of file...\n"
	echo -e " [*] The script will immediately terminate in case of integrity failure\n"
	sha256sum -c ${1:filename}.sha256 || {
		printf "$RED Error: Please rerun script and ensure target site is up.\n${RESET}"
		exit 1
	}
}
endsnippet

snippet printline "Print a blue line"
printline() {
	printf "${BLUE}\n"
	echo -e " #------------------------------------------#\n"
}
endsnippet

snippet credits "Shameless plug" b
printline
echo -e "\nEnjoy your script! If any problems arise don't hesistate to create an \
	issue, fork the repo, or reach out.\n"
printline
printline
printf "\n${BLUE} [*] Email   :${YELLOW}    farischugthaigmail.com\n"
printf "$BLUE [*] Website :${YELLOW}    https://www.github.com\farisachugthai\n"
printline
printf "$RESET"
fi
endsnippet

###############
#  Reference  #
###############

# Quite honestly more of a personal reference than something I expect to use.
snippet colors "A list of the ANSI escape codes for colors in scripts."
LIGHT_RED='\033[1;31m'
YELLOW='\033[1;33m'
LIGHT_BLUE='\033[1;34m'
BLACK='\033[0;30m'
DARK_GRAY='\033[1;30m'
Blue='\033[0;34m'
Green 0;32
Light_Green 1;32
Cyan 0;36
Light_Cyan 1;36
Red 0;31
Purple 0;35
Light_Purple 1;35
Brown 0;33
Light_Gray 0;37
White 1;37
RESET='\033[0m'
endsnippet

# TODO: Ensure this works the highlighting is really messed up.
snippet escape_codes "A gentle reminder of all bash escape sequences. Useful for prompts." b
# \a an ASCII bell character (07)
# \d the date in "Weekday Month Date" format (e.g., "Tue May 26")
# \e an ASCII escape character (033)
# \h the hostname up to the first .
# \H the hostname
# \j the number of jobs currently managed by the shell
# \l the basename of the shells terminal device name
# \n newline
# \r carriage return
# \s the name of the shell, the basename of \$0 (the portion following the final slash)
# \t the current time in 24-hour HH:MM:SS format
# \T the current time in 12-hour HH:MM:SS format
# \@ the current time in 12-hour am/pm format
# \u the username of the current user
# \v the version of bash (e.g., 2.00)
# \V the release of bash, version + patchlevel (e.g., 2.00.0)
# \w the current working directory
# \W the basename of the current working directory
# \! the history number of this command
# \# the command number of this command
# \$ if the effective UID is 0, a #, otherwise a $
# \nnn the character corresponding to the octal number nnn
# \\ a backslash
# \[ begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
# \] end a sequence of non-printing characters
endsnippet


#######################################################################
#                             # UltiSnips                             #
#######################################################################

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

snippet sbash "safe bash options"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

# vim:ft=snippets:
