# sh.snippets

# Your personal snippets
# =======================

snippet which "Check if which is on the system and fall back to command otherwise." b
_which() {
	which "$1" 2>/dev/null || command -v "$1" 2>/dev/null
}
endsnippet




snippet usage "If loop echoes help guide if no CLAs" b
if [[ -z "$1" ]]; then
	echo -e "Usage: $0 [options] commands"
	exit 2
fi
endsnippet

# Well done homie this works perfectly
snippet #! "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n# Maintainer: Faris Chugthai \n" `
# set -euo pipefail
endsnippet


global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# snippet #!
# `!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
# endsnippet


snippet sbash "safe bash options"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

# jesus can we talk about the complete lack of order these loosp are in for a sec. hard af to navigate.


#######################################################################
#                                loops                                #
#######################################################################


snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet



snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet


snippet forc "for loop - C style" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet


snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet


################
#  # snipmate  #
################
# *sigh*

snippet go "getopts"
	while getopts '${1:o}' ${2:opts}
	do
		case $$2 in
		${3:o0})
			${0:#staments};;
		esac
	done
endsnippet

# Set SCRIPT_DIR variable to directory script is located.
snippet dirname "get dir script is in"
	SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
endsnippet

snippet header "A full fledged header for your bash script."
	__ScriptVersion="${1:version}"

	#===  FUNCTION  ================================================================
	#         NAME:  usage
	#  DESCRIPTION:  Display usage information.
	#===============================================================================
	function usage ()
	{
		echo "Usage :  $${0:0} [options] [--]

		Options:
		-h|help       Display this message
		-v|version    Display script version"

	}    # ----------  end of function usage  ----------

	#-----------------------------------------------------------------------
	#  Handle command line arguments
	#-----------------------------------------------------------------------

	while getopts ":hv" opt
	do
		case $opt in

		h|help     )  usage; exit 0   ;;

		v|version  )  echo "$${0:0} -- Version $__ScriptVersion"; exit 0   ;;

		* )  echo -e "\n  Option does not exist : $OPTARG\n"
			usage; exit 1   ;;

		esac    # --- end of case ---
	done
	shift $(($OPTIND-1))
endsnippet

snippet root
	if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi
endsnippet

snippet fun-sh
	${1:function_name}() {
		${0:#function_body}
	}
endsnippet

snippet fun
	function ${1:function_name}() {
		${0:#function_body}
	}
endsnippet
# vim:ft=snippets:
