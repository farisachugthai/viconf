# sh.snippets

# Shebang. Good place to start
snippet #! "#!/usr/bin/env (!env)" b
`!p snip.rv = '#!/bin/bash' + "\n# Maintainer: Faris Chugthai \n" `
# set -euo pipefail
endsnippet

snippet # "dupe" b
#!/usr/bin/env bash
# Maintainer: Faris Chugthai

# set -euo pipefail
endsnippet

# Check command line arguments
snippet ifemptystr "If loop echoes help guide if no CLAs" b
if [[ -z "${VISUAL:1}" ]]; then
	echo -e "Usage: $0 [options] commands"
	break
fi
$9
endsnippet

# TODO: Doesn't work
snippet dirname "Save the dir the script is in" b
if [[ -h ${VISUAL:"$source"} ]]; then
	DIRNAME="$( cd -P "$( dirname ${VISUAL:"$source"} )" && pwd )"
fi
endsnippet

snippet source "Var = bash source" b
${VISUAL:source}="${BASH_SOURCE[0]}"
endsnippet

snippet echo "Echo a statement"
echo -e ${VISUAL:$1}
endsnippet

snippet read "Read input from a user" b
read ${VISUAL:$1}
endsnippet

###########
#  Loops  #
###########

snippet if "if ... then (if)" b
if ${3:[[ ${2:condition} ]]}; then
	${1:expression}
${0:possibly good time to expand elif or else}
fi
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet else "else statement" b
else
	${0}
endsnippet

###########
#  tests  #
###########

snippet strempty "Test if a string is empty which in bash is equal to 0" b
[[ -z ${0:VAR} ]]
endsnippet

###############
#  functions  #
###############

snippet which "Check if which is on the system and fall back to command otherwise." b
_which() {
	which "$1" 2>/dev/null || command -v "$1" 2>/dev/null
}
endsnippet

snippet source "Source a file if it exists" b
[[ -f ${VISUAL:1} ]] && source $1 || echo "$1 can not be sourced."
endsnippet

snippet termuxdeps "Check for dependencies on termux" b
checkdeps() {
	printf "${1:BLUE}\n"
	echo -e " [*] Updating apt cache...\n"
	pkg up -y &> /dev/null
	echo -e " [*] Checking for all required tools...\n"

	for ${VISUAL:3} in ${2:pkg}; do
		if [ -e $PREFIX/bin/$i ]; then
			echo -e " â€¢ \$$3 is OK\n"
		else
			echo -e "Installing \$$3...\n"
			pkg install -y \$$3 || {
				printf "$RED"
				echo -e " ERROR: check your internet connection or apt\n Exiting...\n"
				printf "$reset"
				exit 1
			}
		fi
	done
}
endsnippet

# TODO: Get more params from ~/.config/curlrc. Possibly think about making a
# local var for curl options so you only have to type once.
snippet curl "cURL a file" b
getfile() {
	printf "$BLUE [*] Getting ${1:filename}...$reset\n\n"
	curl --progress-bar -L --fail --retry 4 -o ${1:filename} ${2:url}
	printf "\n${BLUE} [*] Getting SHA ... $reset\n\n"
	curl --progress-bar -L --fail --retry 4 -O "${2:url}.sha256"
}
endsnippet

# TODO: Theres a section in man bash that explains which error codes to use for
# What situations. Review and change `exit 1`.
snippet sha256 "Check a cURLed file with sha256" b
checkintegrity() {
	printf "\n${BLUE} [*] Checking integrity of file...\n"
	echo -e " [*] The script will immediately terminate in case of integrity failure\n"
	sha256sum -c ${1:filename}.sha256 || {
		printf "$RED Error: Please rerun script and ensure target site is up.\n${RESET}"
		exit 1
	}
}
endsnippet

snippet printline "Print a blue line"
printline() {
	printf "${BLUE}\n"
	echo -e " #------------------------------------------#\n"
}
endsnippet

snippet credits "Shameless plug" b
printline
echo -e "\nEnjoy your script! If any problems arise don't hesistate to create an \
	issue, fork the repo, or reach out.\n"
printline
printline
printf "\n${BLUE} [*] Email   :${YELLOW}    farischugthaigmail.com\n"
printf "$BLUE [*] Website :${YELLOW}    https://www.github.com\farisachugthai\n"
printline
printf "$RESET"
fi
endsnippet


snippet sbash "safe bash options"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet forc "for loop - C style" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet


################
#	 snipmate  #
################
# *sigh*

snippet go "getopts"
while getopts '${1:o}' ${2:opts}
do
	case $$2 in
	${3:o0})
		${0:#staments};;
	esac
done
endsnippet

# Set SCRIPT_DIR variable to directory script is located.
snippet dirname "get dir script is in"
${1:SCRIPT_DIR}="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
endsnippet

# todo could write a func to increment version on every BufWritePre.
# there should be one at the top of `:he eval`
snippet header "A full fledged header for your bash script."
__`!p snip.rv = snip.fn`="${1:version X.x}"

#===  FUNCTION  ================================================================
#         NAME:  `!p snip.rv = snip.fn`
#  DESCRIPTION:  Display usage information.
#===============================================================================
function usage ()
{
	echo "Usage :  ${2} [options] [--]

	Options:
	-h|help       Display this message
	-v|version    Display script version"

}    # ----------  end of function usage  ----------

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

while getopts ":hv" opt
do
	case $opt in

	h|help     )  usage; exit 0   ;;

	v|version  )  echo "${3} -- Version ${4:ScriptVersion}; exit 0   ;;

	* )  echo -e "\n  Option does not exist : $OPTARG\n"
		usage; exit 1   ;;

	esac    # --- end of case ---
done
shift $(($OPTIND-1))
endsnippet

snippet root "Check if a user's ID is equal to 0 and exec sudo"
if [[ \$(id -u) -ne ${VISUAL:0} ]]; then exec sudo ${VISUAL:0}; fi
endsnippet

snippet func "Define a function"
${VISUAL:${1:function_name}}() {
	${0:# function_body}
}
endsnippet
