# Pandas.snippets

priority 50

# Tip #1: Snippets should be shorter than the original word.
# Don't make your keyword import
snippet imp "Import pandas and numpy." b
import numpy as np
import pandas as pd
endsnippet

snippet desc "Describe a dataframe." b
${1:${VISUAL}}.describe(include = "all")
${1:${VISUAL}}.info()
${1:${VISUAL}}.memory_user(deep = True)
endsnippet

snippet dtypes "Determine the dtype." b
${1:${VISUAL}}.dtypes
endsnippet

snippet csv "Read a CSV file into a dataframe" b
${VISUAL} = pd.read_csv($2, sep=None, engine='python',
						parse_dates=['fcast_date','timestamp'], 
						dtype={${3:'user_id'}: ${4:"category"},
						${5:'strings'}: ${6:'object'}})
endsnippet

snippet csvwrite "Arg.to_csv"
${1:${VISUAL}}.to_csv($2, index = False)
endsnippet

snippet colremove "Arg.drop()"
${1:${VISUAL}}.drop(['column1','column2'], 1, inplace = True)
endsnippet

snippet colrename "Arg.rename()"
${1:${VISUAL}}.rename(columns={'fcast_date_a': 'date_fcast'}, inplace=True)
endsnippet

snippet unique "Arg[i.d.].unique()"
${1:${VISUAL}}["ifp_id"].unique()
endsnippet

snippet rowconcat "Arg = pd.concat()"
${1:${VISUAL}} = pd.concat([df_even, df_odd], axis=1)
endsnippet

snippet colnewop "Arg[col] = Arg[col1] - Arg[col2]"
${VISUAL:1}[${2:"days_from_start"}] = ${VISUAL:1}[${3:"fcast_date_a"}] -${VISUAL:1}[${4:"date_start"}]
endsnippet


snippet colgetdummies
one_hot_cols = pd.get_dummies(ds['outcome'], prefix='outcome')
ds.drop('outcome', axis=1, inplace = True)
ds = ds.join(one_hot_cols)
endsnippet

snippet rowremovecond
c = c[c.n_opts != 5]
endsnippet

snippet pdmerge
c = pd.merge(ex1,ex2,on='ifp_id')
endsnippet

snippet traintestsplit
train = dataset.sample(frac=0.95,random_state=200)
test = dataset.drop(train.index)
endsnippet

snippet nullvaluesummary
${1:${VISUAL}}.isna().sum()
endsnippet

snippet drop_if_any_null
${1:${VISUAL}}.dropna(how='any')
endsnippet

snippet drop_if_all_null
${1:${VISUAL}}.dropna(how='all')
endsnippet

snippet drop_if_any_null_w_subset
${1:${VISUAL}}.dropna(subset = ['column', 'column2'], how='any')
endsnippet

snippet drop_if_all_null_w_subset
${1:${VISUAL}}.dropna(subset = ['column', 'column2'], how='all')
endsnippet

snippet count_column_values
${1:${VISUAL}}['columnname'].value_counts(dropna = False)
endsnippet

snippet fillna
${1:${VISUAL}}['column_name'].fillna(value='not assigned', inplace = True)
endsnippet

snippet duplicates_count
${1:${VISUAL}}.duplicated().sum()
endsnippet

snippet duplicates_view
${1:${VISUAL}}.loc[users.duplicated(keep = 'last'), :]
endsnippet

snippet duplicates_drop_first
${1:${VISUAL}}.drop_duplicates(keep = 'first')
endsnippet

snippet duplicates_drop_last
${1:${VISUAL}}.drop_duplicates(keep = 'last')
endsnippet

snippet duplicates_drop_w_subset
${1:${VISUAL}}.drop_duplicates(subset = ['age', 'zip_code'])
endsnippet

snippet duplicates_count_w_subset
${1:${VISUAL}}.duplicated(subset['age','zip_code']).sum()
endsnippet

snippet duplicates_count_for_column
${1:${VISUAL}}['column_name'].duplicated().sum()
endsnippet

snippet filter_w_conditions
${1:${VISUAL}}[(${1:${VISUAL}}.column1 >= 200) & (${1:${VISUAL}}.column2 == 'Drama')]
endsnippet

snippet mean
${1:${VISUAL}}.field_name.mean()
endsnippet

snippet median
${1:${VISUAL}}.field_name.median()
endsnippet

snippet percentiles
${1:${VISUAL}}.field.quantile([0.1,0.15, .9])
endsnippet

snippet sort_values
${1:${VISUAL}}.sort_values(['column_1'], ascending=False)
endsnippet

snippet groupby_ex1
${1:${VISUAL}}.groupby('column_name').column2.mean()
endsnippet

snippet groupby_ex2
${1:${VISUAL}}.groupby('column_name').column2.max()
endsnippet

snippet groupby_ex3
${1:${VISUAL}}.groupby('continent').mean()
endsnippet

snippet if_then
${1:${VISUAL}}.loc[${1:${VISUAL}}.AAA >= 5,['BBB','CCC']] = 555;
endsnippet

snippet if_then
${1:${VISUAL}}.loc[${1:${VISUAL}}.AAA >= 5,['BBB','CCC']] = 555;
endsnippet

snippet if_else
${1:${VISUAL}}['logic'] = np.where(${1:${VISUAL}}['AAA'] > 5,'high','low');${1:${VISUAL}}
endsnippet

snippet map "Map applies a translation to each element of a series"
${1:${VISUAL}}['new_column'] =${1:${VISUAL}}.column.name.map({'female':0, 'male':1})
endsnippet

snippet apply "Apply applies a function to each element of a series"
${1:${VISUAL}}['new_column'] = train.col1.apply(len)
endsnippet

# This is also a way to remove column and just keep those two
snippet loc
${1:${VISUAL}}.loc[:, ['column1','column2']]
endsnippet

snippet iloc "Iloc to select data referring to numbers for columns"
${1:${VISUAL}}.iloc[:, ${2:0:4}]
endsnippet

snippet type_change
${1:${VISUAL}}['column_name'] = ${1:${VISUAL}}['column_name'].astype('category', categories=['good', 'very good', 'excellent'])
endsnippet

# vim:set sw=4 ts=4 ft=snippets:
