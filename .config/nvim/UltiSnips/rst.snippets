# Rst.snippets:
# -*- coding: utf-8 -*-
# Vim: set ts=3:set expandtab:set shiftwidth=3:

extends snippets
extends python

#######################################################################
#                           Personal Snippets                         #
#######################################################################

global !p

from rst_helper import *

endglobal

snippet title "Title with =" b
${1:${VISUAL:Section name}}
`!p snip.rv = rst_char_len(t[1])*'='`
endsnippet

snippet title- "Title with -" b
${1:${VISUAL:Subsection name}}
`!p snip.rv = rst_char_len(t[1])*'-'`
endsnippet

snippet inlink "Create an internal link"
:ref:\`${1:${VISUAL:link}}\` $0
endsnippet

snippet table "table from sphinx cheatsheet"
==================   ============
Name                 Age
==================   ============
John D Hunter        40
Cast of Thousands    41
And Still More       42
==================   ============
endsnippet

snippet cb "Code Block. Must have 1 blank line surrounding!" bs
.. code-block:: ${1:python}

	 ${2:${VISUAL:code}} $0
endsnippet

# Added s option to remove 'python' if you skip over it
snippet codeb "code block duplicated" bs
.. code-block:: ${1:python}

    ${2:${VISUAL:code}}
endsnippet

snippet code "Inline code. Needs to be visually highlighted first." b
\`\`${0:${VISUAL:text}}\`\`
endsnippet

################
#  formatting  #
################

snippet * "Italics" s
*${1:${VISUAL:Emphasis}}* $0
endsnippet

snippet ** "Bold" s
**${1:${VISUAL:Strong emphasis}}** $0
endsnippet

snippet bold "bold" s
**${1:${VISUAL:Strong emphasis}}** $0
endsnippet

###########
#  links  #
###########

snippet external "link to an external URL. Simpler." smw
\`${1:Optional Link text} <${2:${VISUAL:Link destination}>}\`_ $0
endsnippet

# This should work even though the tabstops are excessively complicated
snippet link "External URL. A space is required between the text and URL!" smw
\`${1:Link text} <${2:${VISUAL:https://github.com/}>}\`_ $0
endsnippet

snippet lab "Marks all headers as the destination for links" smw
.. _${0:${VISUAL}}:
endsnippet

snippet labhe "Label and header tied together." smw
.. _${1}:

${1:${VISUAL}}
endsnippet

snippet link "Separated link and target." b
.. _${1:optional text leading into}: ${2:\`https://somedomain.com\`}
endsnippet

snippet url "Separated link and target." b
.. _${1:optional text leading into}: ${2:\`https://somedomain.com\`}
endsnippet

snippet http "Separated link and target." bs
.. _${1:${VISUAL:text}}: ${2:\`https://somedomain.com\`}
endsnippet

snippet path "Link to a local file" s
${1:rel path}: ${2:${VISUAL:link}}_.

.. _${2}: ${3:path/to/file} $0
endsnippet

snippet ref  "Links that follow labelled objects. Expand 'lab or labhe'" mw
:ref:\`${1:${VISUAL:path}}\`_
endsnippet

############
#  Sphinx  #
############

snippet sid "SideBar" b
.. sidebar:: ${1:SideBar Title}

   ${2:${VISUAL:SideBar Content}}
endsnippet

# TODO: Figure out what snippet method to invoke to get proper indentation.
snippet func: "Inclass function directive" w
:function:\`${0:${VISUAL}}()\`
endsnippet

snippet class: "Inline class directive" w
:class:\`${0:${VISUAL}}()\`
endsnippet

# Is this a real directive?
snippet function "function directive" w
.. func:: ${1:${VISUAL:call signature}}

   ${2:Describe the func}
endsnippet

snippet class "Class directive" w
.. class:: ${1:${VISUAL:call signature}}

   ${2:Describe the class}
endsnippet

# Directives
# ------------

snippet img "image link directive"
.. |${1:alias}| image:: ${2:img}
endsnippet

snippet fig: "Figure directive" b
.. figure:: ${1:img}
   :alt: ${2:alter text}

$0
endsnippet

snippet cont "content directive" bs
.. contents::

   ${0:${VISUAL:content}}
endsnippet

snippet coded "Code block directive." bs
.. code:: ${1:type}

   ${0:${VISUAL:code}}
endsnippet

snippet tip "Tips or anyone in need of a directive!" bs
.. tip::

   ${0:${VISUAL:Tip for anyone having trouble.}}
endsnippet

snippet coded "Code block directive." b
.. code:: ${1:type}

   ${0:${VISUAL:write some code}}
endsnippet

snippet note "Take note of this directive over here ;)" wms
.. note::

   ${0:${VISUAL:Take note of the fact that}}
endsnippet

snippet warn "Warning directive" wms
.. warning::

   ${0:${VISUAL:Warning:}}
endsnippet

snippet important "Important directive" wms
.. important::

   ${0:${VISUAL:Important notice:}}
endsnippet

snippet att "Attention directive" wms
.. attention::

   ${0:${VISUAL:Attention!}}
endsnippet

snippet dan "Danger directive" wms
.. danger::

   ${0:${VISUAL:Danger:}}
endsnippet

snippet err "Error directive" wms
.. error::

   ${0:${VISUAL:Error:}}
endsnippet

snippet cau "Caution directive" wms
.. caution::

   ${0:${VISUAL:Take precaution with:}}
endsnippet

# Fixed whitespace with qq
# j<>j<<>>3j
# q
# 5@q

################################################################################
#                                Neosnippets                                   #
################################################################################

snippet quickstart "Shougos RST one snippet summary" b
===========================
${1:content_name}
===========================

.. contents:: ${1}

${2:title1}
====================================

${3:subtitle1}
-----------------------------------

${4:subtitle2}
-----------------------------------

${5:subtitle3}
-----------------------------------

${6:title2}
====================================

${7:subtitle1}
-----------------------------------

${8:subtitle2}
-----------------------------------

$0
endsnippet

snippet toctree "directive_toctree" b
.. toctree::
   :maxdepth: ${1:2}

   ${2:FILES}
endsnippet

snippet part "Part"
${1:${VISUAL:Part name}}
`!p snip.rv = rst_char_len(t[1])*'#'`
endsnippet

snippet chap "Chapter"
${1:${VISUAL:Chapter name}}
`!p snip.rv = rst_char_len(t[1])*'*'`
endsnippet

snippet sec "Section"
${1:${VISUAL:Section name}}
`!p snip.rv = rst_char_len(t[1])*'='`
endsnippet

snippet h1 "Header 1" mwb
${1:${VISUAL:Section name}}
`!p snip.rv = rst_char_len(t[1])*'='`
endsnippet

snippet ssec "Subsection"
${1:${VISUAL:Subsection name}}
`!p snip.rv = rst_char_len(t[1])*'-'`
endsnippet

snippet h2 "Header 2" bwm
${1:${VISUAL:Subsection name}}
`!p snip.rv = rst_char_len(t[1])*'-'`
endsnippet

snippet sssec "Subsubsection"
${1:${VISUAL:Subsubsection name}}
`!p snip.rv = rst_char_len(t[1])*'^'`
endsnippet

snippet h3 "Header three" bmw
${1:${VISUAL:Subsubsection name}}
`!p snip.rv = rst_char_len(t[1])*'^'`
endsnippet

snippet para "Paragraph"
${1:${VISUAL:Paragraph name}} $0
`!p snip.rv = rst_char_len(t[1])*'"'`
endsnippet

# WHAT ARE THESE DOUBLE IF'S!
snippet em "Emphasize string" i
`!p
# dirty but works with CJK character detection
if has_cjk(vim.current.line):
    snip.rv ="\ "`*${1:${VISUAL:Em}}*`!p
if has_cjk(vim.current.line):
    snip.rv ="\ "
else:
    snip.rv = " "
`$0
endsnippet

# I'm about to take a weedwhacker to this file.
snippet st "Strong string" i
`!p
if has_cjk(vim.current.line):
    snip.rv ="\ "`**${1:${VISUAL:Strong}}**`!p
if has_cjk(vim.current.line):
    snip.rv ="\ "
else:
    snip.rv = " "
`$0
endsnippet

snippet "li(st)? (?P<num>\d+)" "List usage: li 4<tab> which will extand into a unordered list contains 4 items" br
$0
`!p
snip.rv = make_items(match.groupdict()['num'])
`
endsnippet

snippet "ol(st)? (?P<num>\d+)" "Order List ol 4<tab> which will extand into a ordered list contains 4 items" br
$0
`!p
snip.rv = make_items(match.groupdict()['num'], 1)
`
endsnippet

###########################################################################
#                         More Specialized Stuff.                         #
###########################################################################

# match snippets :
# img, inc, fig
snippet id "Includable Directives" b
`!p
real_name=real_filename(ospath.basename(t[2]))
di=t[1][:2]

link=""
content=""

if di == 'im':
    link = "|{0}|".format(real_name)

if di == 'fi':
    content="""
    :alt: {0}

    {0}""".format(real_name)
`
..`!p snip.rv = " %s" % link if link else ""` $1`!p
snip.rv=complete(t[1], INCLUDABLE_DIRECTIVES)
`:: ${2:${VISUAL:file}}`!p
if content:
    snip.rv +="    "+content`
`!p
# Tip of whether file is exist in comment type
if not check_file_exist(path, t[2]):
    snip.rv='.. FILE {0} does not exist'.format(t[2])
else:
    snip.rv=""
`$0
endsnippet

snippet di "Directives" b
.. $1`!p snip.rv=complete(t[1], DIRECTIVES)`:: $2

   ${3:${VISUAL:Content}}
$0
endsnippet

snippet nd "None Content Directives" b
.. $1`!p snip.rv=complete(t[1], NONE_CONTENT_DIRECTIVES)`:: $2
$0
endsnippet

snippet sa "Specific Admonitions" b
.. $1`!p snip.rv =complete(t[1], SPECIFIC_ADMONITIONS)`::

   ${2:${VISUAL:Content}}

$0
endsnippet

#it will be trigger at start of line or after a word
snippet ro "Text Roles" w
\ :$1`!p snip.rv=complete(t[1],
                          TEXT_ROLES+look_up_directives(TEXT_ROLES_REGEX,
                                                        path))`:\`$2\`\
endsnippet

snippet eu "Embedded URI" i
`!p
if has_cjk(vim.current.line):
    snip.rv = "\ "`\`${1:${VISUAL:Text}} <${2:URI}>\`_`!p
if has_cjk(vim.current.line):
    snip.rv ="\ "
else:
    snip.rv = ""
`$0
endsnippet

snippet fnt "Footnote or Citation" i
[${1:Label}]_ $0

.. [$1] ${2:Reference}
endsnippet

# Only for Nikola â€” Static Site Generator
snippet chart "Pygal chart for Nikola" b
.. chart:: $1`!p snip.rv=complete(t[1], CHART_TYPES)`
   :title: '${2:Browser usage evolution (in %)}'
   :x_labels: [${3:"2002", "2003", "2004", "2005", "2006", "2007"}]

   'Firefox', [None, None, 0, 16.6, 25, 31]
   'Chrome',  [None, None, None, None, None, None]
   'IE',      [85.8, 84.6, 84.7, 74.5, 66, 58.6]
   'Others',  [14.2, 15.4, 15.3, 8.9, 9, 10.4]
$0
endsnippet
