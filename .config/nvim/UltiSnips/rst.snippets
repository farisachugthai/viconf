# Rst.snippets:
# -*- coding: utf-8 -*-
# Vim: set et:set ts=3:set sts=3:set sw=3:

extends snippets
extends python

#######################################################################
#                           Personal Snippets                         #
#######################################################################

global !p

from snippets_helper import make_items,

endglobal

################
#  Inline      #
################

snippet * "Italics"
*${1:${VISUAL:Emphasis}}* $0
endsnippet

snippet ** "Bold"
**${1:${VISUAL:Strong emphasis}}** $0
endsnippet

snippet bold "bold"
**${1:${VISUAL:Strong emphasis}}** $0
endsnippet

snippet kbd "Add the kbd directive to your doc"
:kbd:\`${1:${VISUAL}}\`
endsnippet

snippet rep "Replace"
.. |$1| replace:: $2
endsnippet

snippet ref  "Links that follow labelled objects. Expand 'lab or labhe'" w
:ref:\`${1:${VISUAL:path}}\`_
endsnippet

snippet inlink "Create an internal link" w
:ref:\`${1:${VISUAL:link}}\`_
endsnippet

# TODO: Figure out what snippet method to invoke to get proper indentation.
snippet func "Inclass function directive" w
:function:\`${0:${VISUAL}}\`
endsnippet

snippet class "Inline class directive" w
:class:\`${0:${VISUAL}}\`
endsnippet

snippet mod "Inline mod directive" w
:mod:\`${0:${VISUAL}}\`
endsnippet

snippet code "Inline code. Needs to be visually highlighted first." b
\`\`${0:${VISUAL:text}}\`\`
endsnippet

snippet `` "Double backticks. Best used in visual mode." w
\`\`${0:${VISUAL}}\`\`
endsnippet


###########
#  links  #
###########

snippet external "link to an external URL. Simpler." w
\`${1:Optional Link text} <${2:${VISUAL:Link destination}>}\`_ $0
endsnippet

snippet link "External URL. A space is required between the text and URL!" w
\`${1:Link text} <${2:${VISUAL:https://github.com/}>}\`_ $0
endsnippet

snippet lab "Marks all headers as the destination for links" w
.. _${0:${VISUAL}}:
endsnippet

snippet labhe "Label and header tied together." w
.. _${1}:

${1:${VISUAL}}
endsnippet

snippet link "Separated link and target." b
.. _${1:optional text leading into}: ${2:\`https://somedomain.com\`}
endsnippet

snippet url "Separated link and target." b
.. _${1:optional text leading into}: ${2:\`https://somedomain.com\`}
endsnippet

snippet http "Separated link and target." b
.. _${1:${VISUAL:text}}: ${2:\`https://somedomain.com\`}
endsnippet

snippet path "Link to a local file"
${1:rel path}: ${2:${VISUAL:link}}_.

.. _${2}: ${3:path/to/file} $0
endsnippet

# Directives
# ------------

snippet img "image link directive" w
.. |${1:alias}| image:: ${2:img}
endsnippet

snippet fig: "Figure directive" w
.. figure:: ${1:img}
   :alt: ${2:alter text}

$0
endsnippet

snippet contents "content directive" w
.. contents::
   ${1:${VISUAL::depth:}}
   ${2::local:}

   $0
endsnippet

snippet coded "Code block directive." w
.. code:: ${1:type}

   ${0:${VISUAL:code}}
endsnippet

snippet tip "Tips or anyone in need of a directive!" w
.. tip::

   ${0:${VISUAL:Tip for anyone having trouble.}}
endsnippet

snippet coded "Code block directive." w
.. code:: ${1:type}

   ${0:${VISUAL:write some code}}
endsnippet

snippet note "Take note of this directive over here ;)" w
.. note::

   ${0:${VISUAL:Take note of the fact that}}
endsnippet

snippet warn "Warning directive"
.. warning::

   ${0:${VISUAL:Warning:}}
endsnippet

snippet important "Important directive" w
.. important::

   ${0:${VISUAL:Important notice:}}
endsnippet

snippet att "Attention directive" w
.. attention::

   ${0:${VISUAL:Attention!}}
endsnippet

snippet dan "Danger directive" w
.. danger::

   ${0:${VISUAL:Danger:}}
endsnippet

snippet err "Error directive" w
.. error::

   ${0:${VISUAL:Error:}}
endsnippet

snippet cau "Caution directive" w
.. caution::

   ${0:${VISUAL:Take precaution with:}}
endsnippet

snippet quickstart "Shougos RST one snippet summary" b
===========================
${1:content_name}
===========================

.. contents:: ${1}

${2:title1}
====================================

${3:subtitle1}
-----------------------------------

${4:subtitle2}
-----------------------------------

${5:subtitle3}
-----------------------------------

${6:title2}
====================================

${7:subtitle1}
-----------------------------------

${8:subtitle2}
-----------------------------------

$0
endsnippet

#############
#  headers  #
#############

snippet title "Title with =" b
${1:${VISUAL:Section name}}
`!p snip.rv = len(t[1])*'='`
endsnippet

snippet title- "Title with -" b
${1:${VISUAL:Subsection name}}
`!p snip.rv = len(t[1])*'-'`
endsnippet

snippet part "Part"
${1:${VISUAL:Part name}}
`!p snip.rv = len(t[1])*'#'`
endsnippet

snippet chap "Chapter"
${1:${VISUAL:Chapter name}}
`!p snip.rv = len(t[1])*'*'`
endsnippet

snippet sec "Section"
${1:${VISUAL:Section name}}
`!p snip.rv = len(t[1])*'='`
endsnippet

snippet h1 "Header 1" wb
${1:${VISUAL:Section name}}
`!p snip.rv = len(t[1])*'='`
endsnippet

snippet ssec "Subsection"
${1:${VISUAL:Subsection name}}
`!p snip.rv = len(t[1])*'-'`
endsnippet

snippet h2 "Header 2" bw
${1:${VISUAL:Subsection name}}
`!p snip.rv = len(t[1])*'-'`
endsnippet

snippet sssec "Subsubsection"
${1:${VISUAL:Subsubsection name}}
`!p snip.rv = len(t[1])*'^'`
endsnippet

snippet h3 "Header three" bw
${1:${VISUAL:Subsubsection name}}
`!p snip.rv = len(t[1])*'^'`
endsnippet

snippet para "Paragraph"
${1:${VISUAL:Paragraph name}} $0
`!p snip.rv = len(t[1])*'"'`
endsnippet


snippet "li(st)? (?P<num>\d+)" "List usage: li 4<tab> which will extand into a unordered list contains 4 items" br
$0
`!p
snip.rv = make_items(match.groupdict()['num'])
`
endsnippet

snippet "ol(st)? (?P<num>\d+)" "Order List ol 4<tab> which will extand into a ordered list contains 4 items" br
$0
`!p
snip.rv = make_items(match.groupdict()['num'], 1)
`
endsnippet


############
#  Sphinx  #
############

# Keep Sphinx specific stuff separate for now.
# Utilize "gf" here!
# /data/data/com.termux/files/home/virtualenvs/utilities/lib/python3.7/site-packages/sphinx/directives
# That's the list of every directive sphinx added...
# directives.register_directive('default-role', DefaultRole)
# directives.register_directive('default-domain', DefaultDomain)
# directives.register_directive('describe', ObjectDescription)
# # new, more consistent, name
# directives.register_directive('object', ObjectDescription)

# directives.register_directive('highlightlang', HighlightLang)
# directives.register_directive('sourcecode', CodeBlock)
# directives.register_directive('literalinclude', LiteralInclude)

# directives.register_directive('sectionauthor', Author)
# directives.register_directive('moduleauthor', Author)
# directives.register_directive('codeauthor', Author)
# directives.register_directive('index', Index)
# directives.register_directive('seealso', SeeAlso)
# directives.register_directive('tabularcolumns', TabularColumns)
# directives.register_directive('centered', Centered)
# directives.register_directive('acks', Acks)
# directives.register_directive('hlist', HList)
# directives.register_directive('only', Only)
# directives.register_directive('include', Include)

# # register the standard rst class directive under a different name
# # only for backwards compatibility now
# directives.register_directive('cssclass', Class)
# # new standard name when default-domain with "class" is in effect
# directives.register_directive('rst-class', Class)

# directives.register_directive('figure', Figure)
# directives.register_directive('meta', Meta)
# directives.register_directive('table', RSTTable)
# directives.register_directive('csv-table', CSVTable)
# directives.register_directive('list-table', ListTable)
# directives.register_directive('math', MathDirective)

###################
#  Sphinx Inline  #
###################

snippet com "command inline" s
:command:\`${1:$VISUAL}\`
endsnippet

snippet math "math inline" s
:math:\`${1:$VISUAL}\`
endsnippet

snippet file "file inline" s
:file:\`${1:$VISUAL}\`
endsnippet

snippet pep "pep inline" s
:pep:\`${1:$VISUAL}\`
endsnippet

snippet doc "doc inline" s
:doc:\`${1:$VISUAL}\`
endsnippet

######################
#  Sphinx Directive  #
######################


snippet sid "SideBar" b
.. sidebar:: ${1:SideBar Title}

   ${2:${VISUAL:SideBar Content}}
endsnippet

snippet cb "Code Block. Must have 1 blank line surrounding!" bs
.. code-block:: ${1:python3}

   ${2:${VISUAL:code}}

$0
endsnippet

snippet codeb "code block duplicated" bs
.. code-block:: ${1:python}

   ${2:${VISUAL:code}}
endsnippet

snippet cb "Code Block. Must have 1 blank line surrounding!" bs
.. code-block:: ${1:python3}

   ${2:${VISUAL:code}}

$0
endsnippet

snippet codeb "code block duplicated" bs
.. code-block:: ${1:python}

   ${2:${VISUAL:code}}
endsnippet

snippet hi "Set a highlight directive to establish the base for code block directives" ms
.. highlight::
   ${1::linenos:}
   ${2::linenothreshold:}
   ${3::emphasize-lines: 1,2,3}

${0:Optional arguments above}
endsnippet

snippet toctree "directive_toctree" b
.. toctree::
   :maxdepth: ${1:2}

   ${2:FILES}
endsnippet

snippet table "table from sphinx cheatsheet"
==================   ============
Name                 Age
==================   ============
John D Hunter        40
Cast of Thousands    41
And Still More       42
==================   ============
endsnippet

snippet env "Environment variables" s
:envvar:\`${1:${VISUAL}}\`
endsnippet

snippet only "Only create directive based on certain parameters" s
.. only:: html

   :Release: |version|
   :Date: |today|
endsnippet
